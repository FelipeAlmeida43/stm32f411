
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f8  080052f8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005300  08005300  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005304  08005304  00006304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005308  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000068  08005370  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08005370  000075c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e782  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b2  00000000  00000000  0001581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00017ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  00018850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017803  00000000  00000000  000192d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb68  00000000  00000000  00030ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090347  00000000  00000000  0004063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  000d09c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d4a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051bc 	.word	0x080051bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080051bc 	.word	0x080051bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Log>:
#define COLOR_MAGENTA "\x1b[35m"
#define COLOR_CYAN    "\x1b[36m"

extern enum LogLevel level;

void Log(UART_HandleTypeDef *huart,LogLevel level, const char *format, ...) {
 8000570:	b40c      	push	{r2, r3}
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]
    va_list args;
    va_start(args, format);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	60fb      	str	r3, [r7, #12]

    switch (level) {
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d826      	bhi.n	80005d8 <Log+0x68>
 800058a:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <Log+0x20>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005af 	.word	0x080005af
 8000598:	080005bd 	.word	0x080005bd
 800059c:	080005cb 	.word	0x080005cb
        case LOG_LEVEL_INFO:
        	//HAL_UART_Transmit(huart, COLOR_GREEN, sizeof(COLOR_GREEN), 100);
            printf(COLOR_GREEN);
 80005a0:	4818      	ldr	r0, [pc, #96]	@ (8000604 <Log+0x94>)
 80005a2:	f003 ff49 	bl	8004438 <iprintf>
            printf("[INFO]: ");
 80005a6:	4818      	ldr	r0, [pc, #96]	@ (8000608 <Log+0x98>)
 80005a8:	f003 ff46 	bl	8004438 <iprintf>
            break;
 80005ac:	e018      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_WARNING:
            printf(COLOR_YELLOW);
 80005ae:	4817      	ldr	r0, [pc, #92]	@ (800060c <Log+0x9c>)
 80005b0:	f003 ff42 	bl	8004438 <iprintf>
            printf("[WARNING]: ");
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <Log+0xa0>)
 80005b6:	f003 ff3f 	bl	8004438 <iprintf>
            break;
 80005ba:	e011      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_VERBOSE:
            printf(COLOR_CYAN);
 80005bc:	4815      	ldr	r0, [pc, #84]	@ (8000614 <Log+0xa4>)
 80005be:	f003 ff3b 	bl	8004438 <iprintf>
            printf("[VERBOSE]: ");
 80005c2:	4815      	ldr	r0, [pc, #84]	@ (8000618 <Log+0xa8>)
 80005c4:	f003 ff38 	bl	8004438 <iprintf>
            break;
 80005c8:	e00a      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_ERROR:
             printf(COLOR_RED);
 80005ca:	4814      	ldr	r0, [pc, #80]	@ (800061c <Log+0xac>)
 80005cc:	f003 ff34 	bl	8004438 <iprintf>
             printf("[ERROR]: ");
 80005d0:	4813      	ldr	r0, [pc, #76]	@ (8000620 <Log+0xb0>)
 80005d2:	f003 ff31 	bl	8004438 <iprintf>
             break;
 80005d6:	e003      	b.n	80005e0 <Log+0x70>
        default:
            printf(COLOR_RESET);
 80005d8:	4812      	ldr	r0, [pc, #72]	@ (8000624 <Log+0xb4>)
 80005da:	f003 ff2d 	bl	8004438 <iprintf>
            break;
 80005de:	bf00      	nop
    }

    vprintf(format, args);
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	69b8      	ldr	r0, [r7, #24]
 80005e4:	f003 ff86 	bl	80044f4 <viprintf>
    printf(COLOR_RESET);
 80005e8:	480e      	ldr	r0, [pc, #56]	@ (8000624 <Log+0xb4>)
 80005ea:	f003 ff25 	bl	8004438 <iprintf>
    printf("\n");
 80005ee:	200a      	movs	r0, #10
 80005f0:	f003 ff34 	bl	800445c <putchar>

    va_end(args);
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fe:	b002      	add	sp, #8
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	080051d4 	.word	0x080051d4
 8000608:	080051dc 	.word	0x080051dc
 800060c:	080051e8 	.word	0x080051e8
 8000610:	080051f0 	.word	0x080051f0
 8000614:	080051fc 	.word	0x080051fc
 8000618:	08005204 	.word	0x08005204
 800061c:	08005210 	.word	0x08005210
 8000620:	08005218 	.word	0x08005218
 8000624:	08005224 	.word	0x08005224

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fdbd 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f85d 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f9fb 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 800063a:	f000 f9d9 	bl	80009f0 <MX_DMA_Init>
  MX_TIM1_Init();
 800063e:	f000 f8bf 	bl	80007c0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f9ab 	bl	800099c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000646:	f000 f95b 	bl	8000900 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800064a:	4826      	ldr	r0, [pc, #152]	@ (80006e4 <main+0xbc>)
 800064c:	f002 f914 	bl	8002878 <HAL_TIM_Base_Start_IT>
  uint8_t led_colors[NUM_LEDS][3] = {
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
            {0, 0, 0},  // Green
            {0, 0, 0},  // Blue
            {0, 0, 0} // Yellow
        };
 // WS2812SendColors(led_colors, NUM_LEDS);
  ws2812_init(&htim1, &hdma_tim1_ch1, TIM_CHANNEL_1);
 8000660:	2200      	movs	r2, #0
 8000662:	4921      	ldr	r1, [pc, #132]	@ (80006e8 <main+0xc0>)
 8000664:	4821      	ldr	r0, [pc, #132]	@ (80006ec <main+0xc4>)
 8000666:	f000 fc75 	bl	8000f54 <ws2812_init>
  ws2812_set_colors(&htim1, (uint32_t*)led_colors, NUM_LEDS);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2208      	movs	r2, #8
 800066e:	4619      	mov	r1, r3
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <main+0xc4>)
 8000672:	f000 fca7 	bl	8000fc4 <ws2812_set_colors>
  HAL_Delay(2000); // 500 ms delay[
 8000676:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800067a:	f000 fe09 	bl	8001290 <HAL_Delay>
  update_single_led(6,0,64,0);
 800067e:	2300      	movs	r3, #0
 8000680:	2240      	movs	r2, #64	@ 0x40
 8000682:	2100      	movs	r1, #0
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fd29 	bl	80010dc <update_single_led>
  HAL_Delay(2000); // 500 ms delay[
 800068a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800068e:	f000 fdff 	bl	8001290 <HAL_Delay>

  bool ledStatus =false;
 8000692:	2300      	movs	r3, #0
 8000694:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(!ledStatus){
 8000696:	7ffb      	ldrb	r3, [r7, #31]
 8000698:	f083 0301 	eor.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d006      	beq.n	80006b0 <main+0x88>
		  update_single_led(4,64,0,0);
 80006a2:	2300      	movs	r3, #0
 80006a4:	2200      	movs	r2, #0
 80006a6:	2140      	movs	r1, #64	@ 0x40
 80006a8:	2004      	movs	r0, #4
 80006aa:	f000 fd17 	bl	80010dc <update_single_led>
 80006ae:	e005      	b.n	80006bc <main+0x94>
	  }else update_single_led(4,0,0,0);
 80006b0:	2300      	movs	r3, #0
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2004      	movs	r0, #4
 80006b8:	f000 fd10 	bl	80010dc <update_single_led>
	  ledStatus = !ledStatus;
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	77fb      	strb	r3, [r7, #31]
 80006d0:	7ffb      	ldrb	r3, [r7, #31]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	77fb      	strb	r3, [r7, #31]
	  HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f000 fdd8 	bl	8001290 <HAL_Delay>
	  if(!ledStatus){
 80006e0:	e7d9      	b.n	8000696 <main+0x6e>
 80006e2:	bf00      	nop
 80006e4:	200000cc 	.word	0x200000cc
 80006e8:	20000114 	.word	0x20000114
 80006ec:	20000084 	.word	0x20000084

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	@ 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 ff02 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a26      	ldr	r2, [pc, #152]	@ (80007b8 <SystemClock_Config+0xc8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <SystemClock_Config+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a20      	ldr	r2, [pc, #128]	@ (80007bc <SystemClock_Config+0xcc>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000764:	2348      	movs	r3, #72	@ 0x48
 8000766:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fbd7 	bl	8001f28 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f9b2 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2102      	movs	r1, #2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fe39 	bl	8002418 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ac:	f000 f99c 	bl	8000ae8 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	@ 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	@ 0x58
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2220      	movs	r2, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fe85 	bl	8004508 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b3e      	ldr	r3, [pc, #248]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000800:	4a3e      	ldr	r2, [pc, #248]	@ (80008fc <MX_TIM1_Init+0x13c>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000804:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <MX_TIM1_Init+0x138>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8000810:	4b39      	ldr	r3, [pc, #228]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000812:	2259      	movs	r2, #89	@ 0x59
 8000814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b38      	ldr	r3, [pc, #224]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081c:	4b36      	ldr	r3, [pc, #216]	@ (80008f8 <MX_TIM1_Init+0x138>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b35      	ldr	r3, [pc, #212]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000828:	4833      	ldr	r0, [pc, #204]	@ (80008f8 <MX_TIM1_Init+0x138>)
 800082a:	f001 ffd5 	bl	80027d8 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000834:	f000 f958 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000842:	4619      	mov	r1, r3
 8000844:	482c      	ldr	r0, [pc, #176]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000846:	f002 fcfb 	bl	8003240 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000850:	f000 f94a 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000854:	4828      	ldr	r0, [pc, #160]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000856:	f002 f871 	bl	800293c <HAL_TIM_PWM_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000860:	f000 f942 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000870:	4619      	mov	r1, r3
 8000872:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <MX_TIM1_Init+0x138>)
 8000874:	f003 f986 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800087e:	f000 f933 	bl	8000ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000882:	2360      	movs	r3, #96	@ 0x60
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4814      	ldr	r0, [pc, #80]	@ (80008f8 <MX_TIM1_Init+0x138>)
 80008a8:	f002 fc08 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80008b2:	f000 f919 	bl	8000ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <MX_TIM1_Init+0x138>)
 80008da:	f003 f9c1 	bl	8003c60 <HAL_TIMEx_ConfigBreakDeadTime>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008e4:	f000 f900 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <MX_TIM1_Init+0x138>)
 80008ea:	f000 f99f 	bl	8000c2c <HAL_TIM_MspPostInit>

}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	@ 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000084 	.word	0x20000084
 80008fc:	40010000 	.word	0x40010000

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091c:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_TIM3_Init+0x94>)
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000920:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_TIM3_Init+0x94>)
 8000924:	2247      	movs	r2, #71	@ 0x47
 8000926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_TIM3_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_TIM3_Init+0x94>)
 8000930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000934:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_TIM3_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_TIM3_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000942:	4814      	ldr	r0, [pc, #80]	@ (8000994 <MX_TIM3_Init+0x94>)
 8000944:	f001 ff48 	bl	80027d8 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f8cb 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_TIM3_Init+0x94>)
 8000960:	f002 fc6e 	bl	8003240 <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 f8bd 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	@ (8000994 <MX_TIM3_Init+0x94>)
 800097c:	f003 f902 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000986:	f000 f8af 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000cc 	.word	0x200000cc
 8000998:	40000400 	.word	0x40000400

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f003 f9aa 	bl	8003d2c <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f883 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000174 	.word	0x20000174
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <MX_DMA_Init+0x3c>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2039      	movs	r0, #57	@ 0x39
 8000a18:	f000 fd39 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a1c:	2039      	movs	r0, #57	@ 0x39
 8000a1e:	f000 fd52 	bl	80014c6 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_GPIO_Init+0x30>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0x30>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0x30>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1a      	ldr	r2, [pc, #104]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12e      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x70>
        // Increment your variable here every 100ms
        millisLed++;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a7e:	6013      	str	r3, [r2, #0]
        static bool ledBlue = false;
        if(millisLed>= 3){
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d925      	bls.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x70>
        	millisLed = 0;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
        	if(!ledBlue){
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x46>
        		update_single_led(2, 0, 0,64);
 8000a9c:	2340      	movs	r3, #64	@ 0x40
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 fb1a 	bl	80010dc <update_single_led>
 8000aa8:	e005      	b.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x52>
        	}else update_single_led(2, 0, 0,0);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f000 fb13 	bl	80010dc <update_single_led>
        	ledBlue = !ledBlue;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf14      	ite	ne
 8000abe:	2301      	movne	r3, #1
 8000ac0:	2300      	moveq	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ad2:	701a      	strb	r2, [r3, #0]

        }
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40000400 	.word	0x40000400
 8000ae0:	200001bc 	.word	0x200001bc
 8000ae4:	200001c0 	.word	0x200001c0

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a31      	ldr	r2, [pc, #196]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d140      	bne.n	8000bd8 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b72:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b74:	4a2b      	ldr	r2, [pc, #172]	@ (8000c24 <HAL_TIM_Base_MspInit+0xe0>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b7a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000b7e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b82:	2240      	movs	r2, #64	@ 0x40
 8000b84:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b92:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000b9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000bae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000bba:	4819      	ldr	r0, [pc, #100]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000bbc:	f000 fc9e 	bl	80014fc <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8000bc6:	f7ff ff8f 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000bce:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd0:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <HAL_TIM_Base_MspInit+0xdc>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bd6:	e01a      	b.n	8000c0e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <HAL_TIM_Base_MspInit+0xe4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d115      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_TIM_Base_MspInit+0xd8>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201d      	movs	r0, #29
 8000c04:	f000 fc43 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c08:	201d      	movs	r0, #29
 8000c0a:	f000 fc5c 	bl	80014c6 <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	20000114 	.word	0x20000114
 8000c24:	40026428 	.word	0x40026428
 8000c28:	40000400 	.word	0x40000400

08000c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <HAL_TIM_MspPostInit+0x68>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d11e      	bne.n	8000c8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <HAL_TIM_MspPostInit+0x70>)
 8000c88:	f000 ffca 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40010000 	.word	0x40010000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	@ (8000d24 <HAL_UART_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_UART_MspInit+0x8c>)
 8000d16:	f000 ff83 	bl	8001c20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <NMI_Handler+0x4>

08000d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <MemManage_Handler+0x4>

08000d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 fa63 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <TIM3_IRQHandler+0x10>)
 8000d96:	f002 f8a1 	bl	8002edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000cc 	.word	0x200000cc

08000da4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <DMA2_Stream1_IRQHandler+0x10>)
 8000daa:	f000 fccf 	bl	800174c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000114 	.word	0x20000114

08000db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
  }

  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
  }
  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f003 fb6e 	bl	80045a4 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20020000 	.word	0x20020000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200001c4 	.word	0x200001c4
 8000efc:	200005c0 	.word	0x200005c0

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <HAL_TIM_PWM_PulseFinishedCallback>:
static TIM_HandleTypeDef htim;
static DMA_HandleTypeDef hdma;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
volatile uint8_t ws2812_dma_done = 0;  // Global flag to track DMA completion
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {  // Check if it's TIM3 (or your chosen timer)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d106      	bne.n	8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);  // Stop PWM after transmission
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f001 ff09 	bl	8002d50 <HAL_TIM_PWM_Stop_DMA>
        ws2812_dma_done = 1;  // Set a flag to indicate DMA is done
 8000f3e:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
    }
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	2000046c 	.word	0x2000046c

08000f54 <ws2812_init>:
void ws2812_init(TIM_HandleTypeDef *htim_ptr, DMA_HandleTypeDef *hdma_ptr, uint32_t tim_channel) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
    htim = *htim_ptr;
 8000f60:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <ws2812_init+0x58>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	2348      	movs	r3, #72	@ 0x48
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f003 fb47 	bl	80045fe <memcpy>
    hdma = *hdma_ptr;
 8000f70:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <ws2812_init+0x5c>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	2360      	movs	r3, #96	@ 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f003 fb3f 	bl	80045fe <memcpy>

    if(HAL_TIM_PWM_Init(&htim1)!= HAL_OK){
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <ws2812_init+0x60>)
 8000f82:	f001 fcdb 	bl	800293c <HAL_TIM_PWM_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <ws2812_init+0x44>
    	Log(&huart2, LOG_LEVEL_ERROR,"HAL_TIM_PWM_Init_FAILED\r\n");
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <ws2812_init+0x64>)
 8000f8e:	2103      	movs	r1, #3
 8000f90:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <ws2812_init+0x68>)
 8000f92:	f7ff faed 	bl	8000570 <Log>
    }else Log(&huart2, LOG_LEVEL_INFO,"HAL_TIM_PWM_Init_SUCCESS\r\n");
}
 8000f96:	e004      	b.n	8000fa2 <ws2812_init+0x4e>
    }else Log(&huart2, LOG_LEVEL_INFO,"HAL_TIM_PWM_Init_SUCCESS\r\n");
 8000f98:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <ws2812_init+0x6c>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <ws2812_init+0x68>)
 8000f9e:	f7ff fae7 	bl	8000570 <Log>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200003c4 	.word	0x200003c4
 8000fb0:	2000040c 	.word	0x2000040c
 8000fb4:	20000084 	.word	0x20000084
 8000fb8:	0800522c 	.word	0x0800522c
 8000fbc:	20000174 	.word	0x20000174
 8000fc0:	08005248 	.word	0x08005248

08000fc4 <ws2812_set_colors>:



void ws2812_set_colors(TIM_HandleTypeDef *htim_ptr, uint8_t *colors, int num_leds) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
    int bit_index = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int led = 0; led < num_leds; led++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	e03a      	b.n	8001050 <ws2812_set_colors+0x8c>
        uint32_t color = (colors[led * 3] << 16) | (colors[led * 3 + 1] << 8) | colors[led * 3 + 2];
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0419      	lsls	r1, r3, #16
 8000fec:	6a3a      	ldr	r2, [r7, #32]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	4319      	orrs	r1, r3
 8001000:	6a3a      	ldr	r2, [r7, #32]
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	3302      	adds	r3, #2
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	430b      	orrs	r3, r1
 8001012:	617b      	str	r3, [r7, #20]
        for (int i = 23; i >= 0; i--) {
 8001014:	2317      	movs	r3, #23
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	e014      	b.n	8001044 <ws2812_set_colors+0x80>
            ws2812_buffer[bit_index++] = (color & (1 << i)) ? WS2812_T1H_CYCLES : WS2812_T0H_CYCLES;
 800101a:	2201      	movs	r2, #1
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	461a      	mov	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <ws2812_set_colors+0x6c>
 800102c:	213a      	movs	r1, #58	@ 0x3a
 800102e:	e000      	b.n	8001032 <ws2812_set_colors+0x6e>
 8001030:	211d      	movs	r1, #29
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	627a      	str	r2, [r7, #36]	@ 0x24
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <ws2812_set_colors+0xfc>)
 800103a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 23; i >= 0; i--) {
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b01      	subs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dae7      	bge.n	800101a <ws2812_set_colors+0x56>
    for (int led = 0; led < num_leds; led++) {
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	3301      	adds	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3a      	ldr	r2, [r7, #32]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbc0      	blt.n	8000fda <ws2812_set_colors+0x16>
        }
    }

    // Adicionar código de reset
    for (int i = 0; i < RESET_SLOTS; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	e009      	b.n	8001072 <ws2812_set_colors+0xae>
        ws2812_buffer[bit_index++] = 0;
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	627a      	str	r2, [r7, #36]	@ 0x24
 8001064:	4a16      	ldr	r2, [pc, #88]	@ (80010c0 <ws2812_set_colors+0xfc>)
 8001066:	2100      	movs	r1, #0
 8001068:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_SLOTS; i++) {
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	3301      	adds	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b31      	cmp	r3, #49	@ 0x31
 8001076:	ddf2      	ble.n	800105e <ws2812_set_colors+0x9a>
    }
    htim = *htim_ptr;
 8001078:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <ws2812_set_colors+0x100>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	2348      	movs	r3, #72	@ 0x48
 8001082:	461a      	mov	r2, r3
 8001084:	f003 fabb 	bl	80045fe <memcpy>

    ws2812_dma_done = 0;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <ws2812_set_colors+0x104>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    if (HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)ws2812_buffer, TOTAL_BITS) != HAL_OK) {
 800108e:	23f2      	movs	r3, #242	@ 0xf2
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <ws2812_set_colors+0xfc>)
 8001092:	2100      	movs	r1, #0
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <ws2812_set_colors+0x108>)
 8001096:	f001 fcab 	bl	80029f0 <HAL_TIM_PWM_Start_DMA>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <ws2812_set_colors+0xe8>
        Log(&huart2, LOG_LEVEL_ERROR, "HAL_TIM_PWM_Start_DMA_FAILED\r\n");
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <ws2812_set_colors+0x10c>)
 80010a2:	2103      	movs	r1, #3
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <ws2812_set_colors+0x110>)
 80010a6:	f7ff fa63 	bl	8000570 <Log>
    } else {
        Log(&huart2, LOG_LEVEL_INFO, "HAL_TIM_PWM_Start_DMA_SUCCESS\r\n");
    }
}
 80010aa:	e004      	b.n	80010b6 <ws2812_set_colors+0xf2>
        Log(&huart2, LOG_LEVEL_INFO, "HAL_TIM_PWM_Start_DMA_SUCCESS\r\n");
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <ws2812_set_colors+0x114>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <ws2812_set_colors+0x110>)
 80010b2:	f7ff fa5d 	bl	8000570 <Log>
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001c8 	.word	0x200001c8
 80010c4:	200003c4 	.word	0x200003c4
 80010c8:	2000046c 	.word	0x2000046c
 80010cc:	20000084 	.word	0x20000084
 80010d0:	08005264 	.word	0x08005264
 80010d4:	20000174 	.word	0x20000174
 80010d8:	08005284 	.word	0x08005284

080010dc <update_single_led>:
void update_single_led(int led_index, uint8_t green, uint8_t red, uint8_t blue) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70bb      	strb	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	707b      	strb	r3, [r7, #1]
    if (led_index < 0 || led_index >= NUM_LEDS) return;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db23      	blt.n	8001144 <update_single_led+0x68>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	dc20      	bgt.n	8001144 <update_single_led+0x68>

    // Atualizar a cor do LED específico no array global
    ws2812_colors[led_index * 3] = green;
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	4910      	ldr	r1, [pc, #64]	@ (800114c <update_single_led+0x70>)
 800110c:	78fa      	ldrb	r2, [r7, #3]
 800110e:	54ca      	strb	r2, [r1, r3]
    ws2812_colors[led_index * 3 + 1] = red;
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	3301      	adds	r3, #1
 800111a:	490c      	ldr	r1, [pc, #48]	@ (800114c <update_single_led+0x70>)
 800111c:	78ba      	ldrb	r2, [r7, #2]
 800111e:	54ca      	strb	r2, [r1, r3]
    ws2812_colors[led_index * 3 + 2] = blue;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	3302      	adds	r3, #2
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <update_single_led+0x70>)
 800112c:	787a      	ldrb	r2, [r7, #1]
 800112e:	54ca      	strb	r2, [r1, r3]

    // Atualizar os LEDs com as novas cores
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001130:	2100      	movs	r1, #0
 8001132:	4807      	ldr	r0, [pc, #28]	@ (8001150 <update_single_led+0x74>)
 8001134:	f001 fe0c 	bl	8002d50 <HAL_TIM_PWM_Stop_DMA>
    ws2812_set_colors(&htim, ws2812_colors, NUM_LEDS);
 8001138:	2208      	movs	r2, #8
 800113a:	4904      	ldr	r1, [pc, #16]	@ (800114c <update_single_led+0x70>)
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <update_single_led+0x78>)
 800113e:	f7ff ff41 	bl	8000fc4 <ws2812_set_colors>
 8001142:	e000      	b.n	8001146 <update_single_led+0x6a>
    if (led_index < 0 || led_index >= NUM_LEDS) return;
 8001144:	bf00      	nop
}
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200003ac 	.word	0x200003ac
 8001150:	20000084 	.word	0x20000084
 8001154:	200003c4 	.word	0x200003c4

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115c:	f7ff fed0 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f003 fa13 	bl	80045b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fa4d 	bl	8000628 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800119c:	08005308 	.word	0x08005308
  ldr r2, =_sbss
 80011a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011a4:	200005c0 	.word	0x200005c0

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f94f 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fc88 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f967 	bl	80014e2 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f92f 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	20000470 	.word	0x20000470

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000470 	.word	0x20000470

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	@ (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	@ 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff feb6 	bl	8001278 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e099      	b.n	800164c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	e00f      	b.n	800155a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153a:	f7ff fe9d 	bl	8001278 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b05      	cmp	r3, #5
 8001546:	d908      	bls.n	800155a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e078      	b.n	800164c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e8      	bne.n	800153a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <HAL_DMA_Init+0x158>)
 8001574:	4013      	ands	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d107      	bne.n	80015c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	4313      	orrs	r3, r2
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d117      	bne.n	800161e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00e      	beq.n	800161e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fa91 	bl	8001b28 <DMA_CheckFifoParam>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800161a:	2301      	movs	r3, #1
 800161c:	e016      	b.n	800164c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fa48 	bl	8001abc <DMA_CalcBaseAndBitshift>
 800162c:	4603      	mov	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001634:	223f      	movs	r2, #63	@ 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f010803f 	.word	0xf010803f

08001658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_DMA_Start_IT+0x26>
 800167a:	2302      	movs	r3, #2
 800167c:	e040      	b.n	8001700 <HAL_DMA_Start_IT+0xa8>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d12f      	bne.n	80016f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f9da 	bl	8001a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b0:	223f      	movs	r2, #63	@ 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0216 	orr.w	r2, r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e005      	b.n	80016fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d004      	beq.n	8001726 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00c      	b.n	8001740 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001758:	4b8e      	ldr	r3, [pc, #568]	@ (8001994 <HAL_DMA_IRQHandler+0x248>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a8e      	ldr	r2, [pc, #568]	@ (8001998 <HAL_DMA_IRQHandler+0x24c>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001776:	2208      	movs	r2, #8
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	2208      	movs	r2, #8
 80017a6:	409a      	lsls	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	2201      	movs	r2, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	f043 0202 	orr.w	r2, r3, #2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	2204      	movs	r2, #4
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	2204      	movs	r2, #4
 8001812:	409a      	lsls	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001828:	2210      	movs	r2, #16
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d043      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03c      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001846:	2210      	movs	r2, #16
 8001848:	409a      	lsls	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d024      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
 800187a:	e01f      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e016      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0208 	bic.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	2220      	movs	r2, #32
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 808f 	beq.w	80019ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8087 	beq.w	80019ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2220      	movs	r2, #32
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d136      	bne.n	8001964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0216 	bic.w	r2, r2, #22
 8001904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <HAL_DMA_IRQHandler+0x1da>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193a:	223f      	movs	r2, #63	@ 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001956:	2b00      	cmp	r3, #0
 8001958:	d07e      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
        }
        return;
 8001962:	e079      	b.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01d      	beq.n	80019ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	2b00      	cmp	r3, #0
 8001986:	d031      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e02c      	b.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000
 8001998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
 80019ac:	e01e      	b.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0210 	bic.w	r2, r2, #16
 80019ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d032      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d307      	bcc.n	8001a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f2      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x2cc>
 8001a32:	e000      	b.n	8001a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e000      	b.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a58:	bf00      	nop
    }
  }
}
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b40      	cmp	r3, #64	@ 0x40
 8001a8c:	d108      	bne.n	8001aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9e:	e007      	b.n	8001ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b10      	subs	r3, #16
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <DMA_CalcBaseAndBitshift+0x64>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad6:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d909      	bls.n	8001afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001af2:	f023 0303 	bic.w	r3, r3, #3
 8001af6:	1d1a      	adds	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001afc:	e007      	b.n	8001b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	aaaaaaab 	.word	0xaaaaaaab
 8001b24:	080052bc 	.word	0x080052bc

08001b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11f      	bne.n	8001b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d856      	bhi.n	8001bf6 <DMA_CheckFifoParam+0xce>
 8001b48:	a201      	add	r2, pc, #4	@ (adr r2, 8001b50 <DMA_CheckFifoParam+0x28>)
 8001b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4e:	bf00      	nop
 8001b50:	08001b61 	.word	0x08001b61
 8001b54:	08001b73 	.word	0x08001b73
 8001b58:	08001b61 	.word	0x08001b61
 8001b5c:	08001bf7 	.word	0x08001bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d046      	beq.n	8001bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b70:	e043      	b.n	8001bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b7a:	d140      	bne.n	8001bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b80:	e03d      	b.n	8001bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b8a:	d121      	bne.n	8001bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d837      	bhi.n	8001c02 <DMA_CheckFifoParam+0xda>
 8001b92:	a201      	add	r2, pc, #4	@ (adr r2, 8001b98 <DMA_CheckFifoParam+0x70>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001baf 	.word	0x08001baf
 8001ba0:	08001ba9 	.word	0x08001ba9
 8001ba4:	08001bc1 	.word	0x08001bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bac:	e030      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d025      	beq.n	8001c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bbe:	e022      	b.n	8001c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bc8:	d11f      	bne.n	8001c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bce:	e01c      	b.n	8001c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d903      	bls.n	8001bde <DMA_CheckFifoParam+0xb6>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d003      	beq.n	8001be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bdc:	e018      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
      break;
 8001be2:	e015      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00e      	beq.n	8001c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf4:	e00b      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e00a      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e008      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e006      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e004      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e002      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c0a:	bf00      	nop
 8001c0c:	e000      	b.n	8001c10 <DMA_CheckFifoParam+0xe8>
      break;
 8001c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e159      	b.n	8001ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 8148 	bne.w	8001eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d005      	beq.n	8001c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d130      	bne.n	8001cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 0201 	and.w	r2, r3, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d017      	beq.n	8001d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a2 	beq.w	8001eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b57      	ldr	r3, [pc, #348]	@ (8001f08 <HAL_GPIO_Init+0x2e8>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a56      	ldr	r2, [pc, #344]	@ (8001f08 <HAL_GPIO_Init+0x2e8>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b54      	ldr	r3, [pc, #336]	@ (8001f08 <HAL_GPIO_Init+0x2e8>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc2:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_GPIO_Init+0x2ec>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a49      	ldr	r2, [pc, #292]	@ (8001f10 <HAL_GPIO_Init+0x2f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x202>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a48      	ldr	r2, [pc, #288]	@ (8001f14 <HAL_GPIO_Init+0x2f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x1fe>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a47      	ldr	r2, [pc, #284]	@ (8001f18 <HAL_GPIO_Init+0x2f8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x1fa>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a46      	ldr	r2, [pc, #280]	@ (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x1f6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a45      	ldr	r2, [pc, #276]	@ (8001f20 <HAL_GPIO_Init+0x300>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x1f2>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x204>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x204>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x204>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x204>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x204>
 8001e22:	2300      	movs	r3, #0
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e34:	4935      	ldr	r1, [pc, #212]	@ (8001f0c <HAL_GPIO_Init+0x2ec>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e66:	4a2f      	ldr	r2, [pc, #188]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e90:	4a24      	ldr	r2, [pc, #144]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eba:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f24 <HAL_GPIO_Init+0x304>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f aea2 	bls.w	8001c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e267      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d075      	beq.n	8002032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f46:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d00c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f52:	4b85      	ldr	r3, [pc, #532]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d112      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	4b82      	ldr	r3, [pc, #520]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05b      	beq.n	8002030 <HAL_RCC_OscConfig+0x108>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d157      	bne.n	8002030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e242      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x74>
 8001f8e:	4b76      	ldr	r3, [pc, #472]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a75      	ldr	r2, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b70      	ldr	r3, [pc, #448]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6f      	ldr	r2, [pc, #444]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001fc0:	4b69      	ldr	r3, [pc, #420]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a68      	ldr	r2, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a65      	ldr	r2, [pc, #404]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f94a 	bl	8001278 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f946 	bl	8001278 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e207      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xc0>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f936 	bl	8001278 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f932 	bl	8001278 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	@ 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1f3      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b51      	ldr	r3, [pc, #324]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0xe8>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d063      	beq.n	8002106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800203e:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002056:	4b44      	ldr	r3, [pc, #272]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b41      	ldr	r3, [pc, #260]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x152>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1c7      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4937      	ldr	r1, [pc, #220]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e03a      	b.n	8002106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b34      	ldr	r3, [pc, #208]	@ (800216c <HAL_RCC_OscConfig+0x244>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7ff f8eb 	bl	8001278 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7ff f8e7 	bl	8001278 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e1a8      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4925      	ldr	r1, [pc, #148]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCC_OscConfig+0x244>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff f8ca 	bl	8001278 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff f8c6 	bl	8001278 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e187      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d036      	beq.n	8002180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x248>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f8aa 	bl	8001278 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff f8a6 	bl	8001278 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e167      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_OscConfig+0x240>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x200>
 8002146:	e01b      	b.n	8002180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_RCC_OscConfig+0x248>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7ff f893 	bl	8001278 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	e00e      	b.n	8002174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff f88f 	bl	8001278 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d907      	bls.n	8002174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e150      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
 8002168:	40023800 	.word	0x40023800
 800216c:	42470000 	.word	0x42470000
 8002170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b88      	ldr	r3, [pc, #544]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ea      	bne.n	8002156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8097 	beq.w	80022bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002192:	4b81      	ldr	r3, [pc, #516]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10f      	bne.n	80021be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	4b77      	ldr	r3, [pc, #476]	@ (800239c <HAL_RCC_OscConfig+0x474>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ca:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_RCC_OscConfig+0x474>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a73      	ldr	r2, [pc, #460]	@ (800239c <HAL_RCC_OscConfig+0x474>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d6:	f7ff f84f 	bl	8001278 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7ff f84b 	bl	8001278 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e10c      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	4b6a      	ldr	r3, [pc, #424]	@ (800239c <HAL_RCC_OscConfig+0x474>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x2ea>
 8002204:	4b64      	ldr	r3, [pc, #400]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002208:	4a63      	ldr	r2, [pc, #396]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x324>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b05      	cmp	r3, #5
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x30c>
 800221a:	4b5f      	ldr	r3, [pc, #380]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	4a5e      	ldr	r2, [pc, #376]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	@ 0x70
 8002226:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	4a5b      	ldr	r2, [pc, #364]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6713      	str	r3, [r2, #112]	@ 0x70
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0x324>
 8002234:	4b58      	ldr	r3, [pc, #352]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	4a57      	ldr	r2, [pc, #348]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002240:	4b55      	ldr	r3, [pc, #340]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a54      	ldr	r2, [pc, #336]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002246:	f023 0304 	bic.w	r3, r3, #4
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7ff f810 	bl	8001278 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7ff f80c 	bl	8001278 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0cb      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ee      	beq.n	800225c <HAL_RCC_OscConfig+0x334>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7fe fffa 	bl	8001278 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fff6 	bl	8001278 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0b5      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ee      	bne.n	8002288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b0:	4b39      	ldr	r3, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	4a38      	ldr	r2, [pc, #224]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a1 	beq.w	8002408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c6:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d05c      	beq.n	800238c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d141      	bne.n	800235e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_RCC_OscConfig+0x478>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe ffca 	bl	8001278 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe ffc6 	bl	8001278 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e087      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	4b27      	ldr	r3, [pc, #156]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	019b      	lsls	r3, r3, #6
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	491b      	ldr	r1, [pc, #108]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x478>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe ff9f 	bl	8001278 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe ff9b 	bl	8001278 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e05c      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x416>
 800235c:	e054      	b.n	8002408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <HAL_RCC_OscConfig+0x478>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe ff88 	bl	8001278 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe ff84 	bl	8001278 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e045      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_RCC_OscConfig+0x470>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x444>
 800238a:	e03d      	b.n	8002408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e038      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
 8002398:	40023800 	.word	0x40023800
 800239c:	40007000 	.word	0x40007000
 80023a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4ec>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d028      	beq.n	8002404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d121      	bne.n	8002404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d11a      	bne.n	8002404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023dc:	4293      	cmp	r3, r2
 80023de:	d111      	bne.n	8002404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0cc      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b68      	ldr	r3, [pc, #416]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d90c      	bls.n	8002454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b65      	ldr	r3, [pc, #404]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a58      	ldr	r2, [pc, #352]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800248e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d044      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b3f      	ldr	r3, [pc, #252]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e067      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4934      	ldr	r1, [pc, #208]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe feb6 	bl	8001278 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe feb2 	bl	8001278 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e04f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d20c      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f821 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fe16 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	40023800 	.word	0x40023800
 80025d8:	080052a4 	.word	0x080052a4
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b090      	sub	sp, #64	@ 0x40
 80025ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d00d      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x40>
 8002608:	2b08      	cmp	r3, #8
 800260a:	f200 80a1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x16c>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 8002612:	2b04      	cmp	r3, #4
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x3a>
 8002616:	e09b      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x184>)
 800261a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800261c:	e09b      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800261e:	4b53      	ldr	r3, [pc, #332]	@ (800276c <HAL_RCC_GetSysClockFreq+0x188>)
 8002620:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002622:	e098      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002624:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800262e:	4b4d      	ldr	r3, [pc, #308]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d028      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263a:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	2200      	movs	r2, #0
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	627a      	str	r2, [r7, #36]	@ 0x24
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800264c:	2100      	movs	r1, #0
 800264e:	4b47      	ldr	r3, [pc, #284]	@ (800276c <HAL_RCC_GetSysClockFreq+0x188>)
 8002650:	fb03 f201 	mul.w	r2, r3, r1
 8002654:	2300      	movs	r3, #0
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	4413      	add	r3, r2
 800265c:	4a43      	ldr	r2, [pc, #268]	@ (800276c <HAL_RCC_GetSysClockFreq+0x188>)
 800265e:	fba0 1202 	umull	r1, r2, r0, r2
 8002662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002664:	460a      	mov	r2, r1
 8002666:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800266a:	4413      	add	r3, r2
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002670:	2200      	movs	r2, #0
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	61fa      	str	r2, [r7, #28]
 8002676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800267e:	f7fd fdff 	bl	8000280 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4613      	mov	r3, r2
 8002688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800268a:	e053      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268c:	4b35      	ldr	r3, [pc, #212]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	2200      	movs	r2, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	617a      	str	r2, [r7, #20]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800269e:	f04f 0b00 	mov.w	fp, #0
 80026a2:	4652      	mov	r2, sl
 80026a4:	465b      	mov	r3, fp
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	ebb2 080a 	subs.w	r8, r2, sl
 80026be:	eb63 090b 	sbc.w	r9, r3, fp
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026d6:	ebb2 0408 	subs.w	r4, r2, r8
 80026da:	eb63 0509 	sbc.w	r5, r3, r9
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	00eb      	lsls	r3, r5, #3
 80026e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ec:	00e2      	lsls	r2, r4, #3
 80026ee:	4614      	mov	r4, r2
 80026f0:	461d      	mov	r5, r3
 80026f2:	eb14 030a 	adds.w	r3, r4, sl
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	eb45 030b 	adc.w	r3, r5, fp
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270a:	4629      	mov	r1, r5
 800270c:	028b      	lsls	r3, r1, #10
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002714:	4621      	mov	r1, r4
 8002716:	028a      	lsls	r2, r1, #10
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271e:	2200      	movs	r2, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002728:	f7fd fdaa 	bl	8000280 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x184>)
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002758:	4618      	mov	r0, r3
 800275a:	3740      	adds	r7, #64	@ 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	017d7840 	.word	0x017d7840

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080052b4 	.word	0x080052b4

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffdc 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	080052b4 	.word	0x080052b4

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e041      	b.n	800286e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f9a0 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fedc 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e044      	b.n	800291a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002928 <HAL_TIM_Base_Start_IT+0xb0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ba:	d013      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_TIM_Base_Start_IT+0xb4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_TIM_Base_Start_IT+0xb8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_TIM_Base_Start_IT+0xbc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_TIM_Base_Start_IT+0xc0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d111      	bne.n	8002908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d010      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	e007      	b.n	8002918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40010000 	.word	0x40010000
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800
 8002934:	40000c00 	.word	0x40000c00
 8002938:	40014000 	.word	0x40014000

0800293c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f839 	bl	80029da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 fe2a 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e022      	b.n	8002a62 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d109      	bne.n	8002a36 <HAL_TIM_PWM_Start_DMA+0x46>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e015      	b.n	8002a62 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d109      	bne.n	8002a50 <HAL_TIM_PWM_Start_DMA+0x60>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e008      	b.n	8002a62 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e15d      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start_DMA+0x94>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e022      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0xda>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HAL_TIM_PWM_Start_DMA+0xae>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e015      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0xda>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d109      	bne.n	8002ab8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e008      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0xda>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d024      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_TIM_PWM_Start_DMA+0xea>
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e123      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start_DMA+0xfe>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aec:	e016      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start_DMA+0x10e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002afc:	e00e      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	e006      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b16:	e001      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e104      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	f200 80ae 	bhi.w	8002c80 <HAL_TIM_PWM_Start_DMA+0x290>
 8002b24:	a201      	add	r2, pc, #4	@ (adr r2, 8002b2c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b61 	.word	0x08002b61
 8002b30:	08002c81 	.word	0x08002c81
 8002b34:	08002c81 	.word	0x08002c81
 8002b38:	08002c81 	.word	0x08002c81
 8002b3c:	08002ba9 	.word	0x08002ba9
 8002b40:	08002c81 	.word	0x08002c81
 8002b44:	08002c81 	.word	0x08002c81
 8002b48:	08002c81 	.word	0x08002c81
 8002b4c:	08002bf1 	.word	0x08002bf1
 8002b50:	08002c81 	.word	0x08002c81
 8002b54:	08002c81 	.word	0x08002c81
 8002b58:	08002c81 	.word	0x08002c81
 8002b5c:	08002c39 	.word	0x08002c39
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	4a72      	ldr	r2, [pc, #456]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002b66:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	4a71      	ldr	r2, [pc, #452]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	4a70      	ldr	r2, [pc, #448]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002b76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3334      	adds	r3, #52	@ 0x34
 8002b84:	461a      	mov	r2, r3
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	f7fe fd66 	bl	8001658 <HAL_DMA_Start_IT>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0c7      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	60da      	str	r2, [r3, #12]
      break;
 8002ba6:	e06e      	b.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	4a60      	ldr	r2, [pc, #384]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002bbe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3338      	adds	r3, #56	@ 0x38
 8002bcc:	461a      	mov	r2, r3
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	f7fe fd42 	bl	8001658 <HAL_DMA_Start_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a3      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bec:	60da      	str	r2, [r3, #12]
      break;
 8002bee:	e04a      	b.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	4a4c      	ldr	r2, [pc, #304]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c06:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	333c      	adds	r3, #60	@ 0x3c
 8002c14:	461a      	mov	r2, r3
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	f7fe fd1e 	bl	8001658 <HAL_DMA_Start_IT>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c34:	60da      	str	r2, [r3, #12]
      break;
 8002c36:	e026      	b.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	4a3b      	ldr	r2, [pc, #236]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3340      	adds	r3, #64	@ 0x40
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	f7fe fcfa 	bl	8001658 <HAL_DMA_Start_IT>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e05b      	b.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c7c:	60da      	str	r2, [r3, #12]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
      break;
 8002c84:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d14b      	bne.n	8002d24 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 ff4f 	bl	8003b38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	@ (8002d3c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_TIM_PWM_Start_DMA+0x300>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc6:	d013      	beq.n	8002cf0 <HAL_TIM_PWM_Start_DMA+0x300>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_TIM_PWM_Start_DMA+0x300>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_PWM_Start_DMA+0x300>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_PWM_Start_DMA+0x300>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a18      	ldr	r2, [pc, #96]	@ (8002d4c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d111      	bne.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d010      	beq.n	8002d24 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	e007      	b.n	8002d24 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	080034c5 	.word	0x080034c5
 8002d34:	0800356d 	.word	0x0800356d
 8002d38:	08003433 	.word	0x08003433
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40014000 	.word	0x40014000

08002d50 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d855      	bhi.n	8002e10 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002d64:	a201      	add	r2, pc, #4	@ (adr r2, 8002d6c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002da1 	.word	0x08002da1
 8002d70:	08002e11 	.word	0x08002e11
 8002d74:	08002e11 	.word	0x08002e11
 8002d78:	08002e11 	.word	0x08002e11
 8002d7c:	08002dbd 	.word	0x08002dbd
 8002d80:	08002e11 	.word	0x08002e11
 8002d84:	08002e11 	.word	0x08002e11
 8002d88:	08002e11 	.word	0x08002e11
 8002d8c:	08002dd9 	.word	0x08002dd9
 8002d90:	08002e11 	.word	0x08002e11
 8002d94:	08002e11 	.word	0x08002e11
 8002d98:	08002e11 	.word	0x08002e11
 8002d9c:	08002df5 	.word	0x08002df5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe fca7 	bl	8001708 <HAL_DMA_Abort_IT>
      break;
 8002dba:	e02c      	b.n	8002e16 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fc99 	bl	8001708 <HAL_DMA_Abort_IT>
      break;
 8002dd6:	e01e      	b.n	8002e16 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fc8b 	bl	8001708 <HAL_DMA_Abort_IT>
      break;
 8002df2:	e010      	b.n	8002e16 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fc7d 	bl	8001708 <HAL_DMA_Abort_IT>
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d157      	bne.n	8002ecc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	6839      	ldr	r1, [r7, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fe87 	bl	8003b38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d117      	bne.n	8002e64 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10f      	bne.n	8002e64 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10f      	bne.n	8002e94 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea2:	e013      	b.n	8002ecc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d104      	bne.n	8002eb4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb2:	e00b      	b.n	8002ecc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d104      	bne.n	8002ec4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec2:	e003      	b.n	8002ecc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000

08002edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d020      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa5b 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa4d 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fd fff5 	bl	8000f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0204 	mvn.w	r2, #4
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa35 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa27 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd ffcf 	bl	8000f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0208 	mvn.w	r2, #8
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa0f 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa01 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fd ffa9 	bl	8000f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0210 	mvn.w	r2, #16
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9e9 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9db 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd ff83 	bl	8000f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0201 	mvn.w	r2, #1
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fd0e 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fe56 	bl	8003d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9bd 	bl	800340a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0220 	mvn.w	r2, #32
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fe28 	bl	8003d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0ae      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	f200 809f 	bhi.w	8003228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ea:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003229 	.word	0x08003229
 80030f8:	08003229 	.word	0x08003229
 80030fc:	08003229 	.word	0x08003229
 8003100:	08003165 	.word	0x08003165
 8003104:	08003229 	.word	0x08003229
 8003108:	08003229 	.word	0x08003229
 800310c:	08003229 	.word	0x08003229
 8003110:	080031a7 	.word	0x080031a7
 8003114:	08003229 	.word	0x08003229
 8003118:	08003229 	.word	0x08003229
 800311c:	08003229 	.word	0x08003229
 8003120:	080031e7 	.word	0x080031e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fade 	bl	80036ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6999      	ldr	r1, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	619a      	str	r2, [r3, #24]
      break;
 8003162:	e064      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fb24 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	021a      	lsls	r2, r3, #8
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	619a      	str	r2, [r3, #24]
      break;
 80031a4:	e043      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fb6f 	bl	8003890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0208 	orr.w	r2, r2, #8
 80031c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0204 	bic.w	r2, r2, #4
 80031d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	61da      	str	r2, [r3, #28]
      break;
 80031e4:	e023      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fbb9 	bl	8003964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
      break;
 8003226:	e002      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIM_ConfigClockSource+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e0b4      	b.n	80033c6 <HAL_TIM_ConfigClockSource+0x186>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800327a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003294:	d03e      	beq.n	8003314 <HAL_TIM_ConfigClockSource+0xd4>
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329a:	f200 8087 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a2:	f000 8086 	beq.w	80033b2 <HAL_TIM_ConfigClockSource+0x172>
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032aa:	d87f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b70      	cmp	r3, #112	@ 0x70
 80032ae:	d01a      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xa6>
 80032b0:	2b70      	cmp	r3, #112	@ 0x70
 80032b2:	d87b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b60      	cmp	r3, #96	@ 0x60
 80032b6:	d050      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x11a>
 80032b8:	2b60      	cmp	r3, #96	@ 0x60
 80032ba:	d877      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b50      	cmp	r3, #80	@ 0x50
 80032be:	d03c      	beq.n	800333a <HAL_TIM_ConfigClockSource+0xfa>
 80032c0:	2b50      	cmp	r3, #80	@ 0x50
 80032c2:	d873      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b40      	cmp	r3, #64	@ 0x40
 80032c6:	d058      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x13a>
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d86f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b30      	cmp	r3, #48	@ 0x30
 80032ce:	d064      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b30      	cmp	r3, #48	@ 0x30
 80032d2:	d86b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d060      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d867      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d05a      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	e062      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f6:	f000 fbff 	bl	8003af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	609a      	str	r2, [r3, #8]
      break;
 8003312:	e04f      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003324:	f000 fbe8 	bl	8003af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003336:	609a      	str	r2, [r3, #8]
      break;
 8003338:	e03c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	461a      	mov	r2, r3
 8003348:	f000 fb5c 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2150      	movs	r1, #80	@ 0x50
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fbb5 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 8003358:	e02c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003366:	461a      	mov	r2, r3
 8003368:	f000 fb7b 	bl	8003a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2160      	movs	r1, #96	@ 0x60
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fba5 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 8003378:	e01c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fb3c 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2140      	movs	r1, #64	@ 0x40
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fb95 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 8003398:	e00c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f000 fb8c 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 80033aa:	e003      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d107      	bne.n	800345a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003458:	e02a      	b.n	80034b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2202      	movs	r2, #2
 8003468:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003472:	e01d      	b.n	80034b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d107      	bne.n	800348e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2204      	movs	r2, #4
 8003482:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348c:	e010      	b.n	80034b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2208      	movs	r2, #8
 800349c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a6:	e003      	b.n	80034b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ffb4 	bl	800341e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10b      	bne.n	80034f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d136      	bne.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f2:	e031      	b.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10b      	bne.n	8003516 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d125      	bne.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003514:	e020      	b.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d10b      	bne.n	8003538 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2204      	movs	r2, #4
 8003524:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d114      	bne.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003536:	e00f      	b.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d10a      	bne.n	8003558 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2208      	movs	r2, #8
 8003546:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7fd fce3 	bl	8000f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d103      	bne.n	800358c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	771a      	strb	r2, [r3, #28]
 800358a:	e019      	b.n	80035c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d103      	bne.n	800359e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2202      	movs	r2, #2
 800359a:	771a      	strb	r2, [r3, #28]
 800359c:	e010      	b.n	80035c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d103      	bne.n	80035b0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2204      	movs	r2, #4
 80035ac:	771a      	strb	r2, [r3, #28]
 80035ae:	e007      	b.n	80035c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d102      	bne.n	80035c0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2208      	movs	r2, #8
 80035be:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff18 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3a      	ldr	r2, [pc, #232]	@ (80036d0 <TIM_Base_SetConfig+0xfc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a37      	ldr	r2, [pc, #220]	@ (80036d4 <TIM_Base_SetConfig+0x100>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a36      	ldr	r2, [pc, #216]	@ (80036d8 <TIM_Base_SetConfig+0x104>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <TIM_Base_SetConfig+0x108>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2b      	ldr	r2, [pc, #172]	@ (80036d0 <TIM_Base_SetConfig+0xfc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d017      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <TIM_Base_SetConfig+0x100>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <TIM_Base_SetConfig+0x104>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00f      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <TIM_Base_SetConfig+0x108>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <TIM_Base_SetConfig+0x10c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <TIM_Base_SetConfig+0x110>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <TIM_Base_SetConfig+0x114>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0e      	ldr	r2, [pc, #56]	@ (80036d0 <TIM_Base_SetConfig+0xfc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]
  }
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800

080036ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10c      	bne.n	8003762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1e      	ldr	r2, [pc, #120]	@ (800388c <TIM_OC2_SetConfig+0xd4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a15      	ldr	r2, [pc, #84]	@ (800388c <TIM_OC2_SetConfig+0xd4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000

08003890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <TIM_OC3_SetConfig+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <TIM_OC3_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40010000 	.word	0x40010000

08003964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <TIM_OC4_SetConfig+0x9c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000

08003a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 0210 	bic.w	r2, r3, #16
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f043 0307 	orr.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e050      	b.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d013      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000

08003c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e03d      	b.n	8003cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e042      	b.n	8003dc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc ffa4 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	@ 0x24
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f82b 	bl	8003dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b0c0      	sub	sp, #256	@ 0x100
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	68d9      	ldr	r1, [r3, #12]
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	ea40 0301 	orr.w	r3, r0, r1
 8003df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e24:	f021 010c 	bic.w	r1, r1, #12
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e32:	430b      	orrs	r3, r1
 8003e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	6999      	ldr	r1, [r3, #24]
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	ea40 0301 	orr.w	r3, r0, r1
 8003e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d005      	beq.n	8003e6c <UART_SetConfig+0xa0>
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8d      	ldr	r3, [pc, #564]	@ (800409c <UART_SetConfig+0x2d0>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d104      	bne.n	8003e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7fe fca0 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8003e70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e74:	e003      	b.n	8003e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7fe fc87 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e88:	f040 810c 	bne.w	80040a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eae:	4621      	mov	r1, r4
 8003eb0:	eb12 0801 	adds.w	r8, r2, r1
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb43 0901 	adc.w	r9, r3, r1
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ece:	4690      	mov	r8, r2
 8003ed0:	4699      	mov	r9, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	eb18 0303 	adds.w	r3, r8, r3
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003edc:	462b      	mov	r3, r5
 8003ede:	eb49 0303 	adc.w	r3, r9, r3
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003efa:	460b      	mov	r3, r1
 8003efc:	18db      	adds	r3, r3, r3
 8003efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f00:	4613      	mov	r3, r2
 8003f02:	eb42 0303 	adc.w	r3, r2, r3
 8003f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f10:	f7fc f9b6 	bl	8000280 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b61      	ldr	r3, [pc, #388]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f44:	4641      	mov	r1, r8
 8003f46:	eb12 0a01 	adds.w	sl, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f64:	4692      	mov	sl, r2
 8003f66:	469b      	mov	fp, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f72:	464b      	mov	r3, r9
 8003f74:	eb4b 0303 	adc.w	r3, fp, r3
 8003f78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f90:	460b      	mov	r3, r1
 8003f92:	18db      	adds	r3, r3, r3
 8003f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f96:	4613      	mov	r3, r2
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fa6:	f7fc f96b 	bl	8000280 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2264      	movs	r2, #100	@ 0x64
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	1acb      	subs	r3, r1, r3
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fc6:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fd4:	441c      	add	r4, r3
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	637b      	str	r3, [r7, #52]	@ 0x34
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800402c:	464b      	mov	r3, r9
 800402e:	460a      	mov	r2, r1
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004044:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800405e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004062:	f7fc f90d 	bl	8000280 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <UART_SetConfig+0x2d4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	@ 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	3332      	adds	r3, #50	@ 0x32
 800407e:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 0207 	and.w	r2, r3, #7
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4422      	add	r2, r4
 8004092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004094:	e106      	b.n	80042a4 <UART_SetConfig+0x4d8>
 8004096:	bf00      	nop
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040b6:	4642      	mov	r2, r8
 80040b8:	464b      	mov	r3, r9
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	6239      	str	r1, [r7, #32]
 80040be:	415b      	adcs	r3, r3
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c6:	4641      	mov	r1, r8
 80040c8:	1854      	adds	r4, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0501 	adc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040ec:	464b      	mov	r3, r9
 80040ee:	eb45 0303 	adc.w	r3, r5, r3
 80040f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004102:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004112:	4629      	mov	r1, r5
 8004114:	008b      	lsls	r3, r1, #2
 8004116:	4621      	mov	r1, r4
 8004118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411c:	4621      	mov	r1, r4
 800411e:	008a      	lsls	r2, r1, #2
 8004120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004124:	f7fc f8ac 	bl	8000280 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4b60      	ldr	r3, [pc, #384]	@ (80042b0 <UART_SetConfig+0x4e4>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	011c      	lsls	r4, r3, #4
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004140:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	61b9      	str	r1, [r7, #24]
 8004150:	415b      	adcs	r3, r3
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6139      	str	r1, [r7, #16]
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041b0:	4649      	mov	r1, r9
 80041b2:	008b      	lsls	r3, r1, #2
 80041b4:	4641      	mov	r1, r8
 80041b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ba:	4641      	mov	r1, r8
 80041bc:	008a      	lsls	r2, r1, #2
 80041be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041c2:	f7fc f85d 	bl	8000280 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	4b38      	ldr	r3, [pc, #224]	@ (80042b0 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 2301 	umull	r2, r3, r3, r1
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2264      	movs	r2, #100	@ 0x64
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	1acb      	subs	r3, r1, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	@ 0x32
 80041e0:	4a33      	ldr	r2, [pc, #204]	@ (80042b0 <UART_SetConfig+0x4e4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ec:	441c      	add	r4, r3
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	1891      	adds	r1, r2, r2
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	415b      	adcs	r3, r3
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420c:	4641      	mov	r1, r8
 800420e:	1851      	adds	r1, r2, r1
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	4649      	mov	r1, r9
 8004214:	414b      	adcs	r3, r1
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004224:	4659      	mov	r1, fp
 8004226:	00cb      	lsls	r3, r1, #3
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422e:	4651      	mov	r1, sl
 8004230:	00ca      	lsls	r2, r1, #3
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	4603      	mov	r3, r0
 8004238:	4642      	mov	r2, r8
 800423a:	189b      	adds	r3, r3, r2
 800423c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423e:	464b      	mov	r3, r9
 8004240:	460a      	mov	r2, r1
 8004242:	eb42 0303 	adc.w	r3, r2, r3
 8004246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	663b      	str	r3, [r7, #96]	@ 0x60
 8004252:	667a      	str	r2, [r7, #100]	@ 0x64
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004260:	4649      	mov	r1, r9
 8004262:	008b      	lsls	r3, r1, #2
 8004264:	4641      	mov	r1, r8
 8004266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426a:	4641      	mov	r1, r8
 800426c:	008a      	lsls	r2, r1, #2
 800426e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004272:	f7fc f805 	bl	8000280 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <UART_SetConfig+0x4e4>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	@ 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	3332      	adds	r3, #50	@ 0x32
 800428e:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <UART_SetConfig+0x4e4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4422      	add	r2, r4
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042aa:	46bd      	mov	sp, r7
 80042ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b0:	51eb851f 	.word	0x51eb851f

080042b4 <std>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b510      	push	{r4, lr}
 80042b8:	4604      	mov	r4, r0
 80042ba:	e9c0 3300 	strd	r3, r3, [r0]
 80042be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042c2:	6083      	str	r3, [r0, #8]
 80042c4:	8181      	strh	r1, [r0, #12]
 80042c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c8:	81c2      	strh	r2, [r0, #14]
 80042ca:	6183      	str	r3, [r0, #24]
 80042cc:	4619      	mov	r1, r3
 80042ce:	2208      	movs	r2, #8
 80042d0:	305c      	adds	r0, #92	@ 0x5c
 80042d2:	f000 f919 	bl	8004508 <memset>
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <std+0x58>)
 80042d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <std+0x5c>)
 80042dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x60>)
 80042e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x64>)
 80042e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x68>)
 80042e8:	6224      	str	r4, [r4, #32]
 80042ea:	429c      	cmp	r4, r3
 80042ec:	d006      	beq.n	80042fc <std+0x48>
 80042ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042f2:	4294      	cmp	r4, r2
 80042f4:	d002      	beq.n	80042fc <std+0x48>
 80042f6:	33d0      	adds	r3, #208	@ 0xd0
 80042f8:	429c      	cmp	r4, r3
 80042fa:	d105      	bne.n	8004308 <std+0x54>
 80042fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004304:	f000 b978 	b.w	80045f8 <__retarget_lock_init_recursive>
 8004308:	bd10      	pop	{r4, pc}
 800430a:	bf00      	nop
 800430c:	0800446d 	.word	0x0800446d
 8004310:	0800448f 	.word	0x0800448f
 8004314:	080044c7 	.word	0x080044c7
 8004318:	080044eb 	.word	0x080044eb
 800431c:	20000474 	.word	0x20000474

08004320 <stdio_exit_handler>:
 8004320:	4a02      	ldr	r2, [pc, #8]	@ (800432c <stdio_exit_handler+0xc>)
 8004322:	4903      	ldr	r1, [pc, #12]	@ (8004330 <stdio_exit_handler+0x10>)
 8004324:	4803      	ldr	r0, [pc, #12]	@ (8004334 <stdio_exit_handler+0x14>)
 8004326:	f000 b869 	b.w	80043fc <_fwalk_sglue>
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c
 8004330:	08004eb5 	.word	0x08004eb5
 8004334:	2000001c 	.word	0x2000001c

08004338 <cleanup_stdio>:
 8004338:	6841      	ldr	r1, [r0, #4]
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <cleanup_stdio+0x34>)
 800433c:	4299      	cmp	r1, r3
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	d001      	beq.n	8004348 <cleanup_stdio+0x10>
 8004344:	f000 fdb6 	bl	8004eb4 <_fflush_r>
 8004348:	68a1      	ldr	r1, [r4, #8]
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <cleanup_stdio+0x38>)
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <cleanup_stdio+0x1e>
 8004350:	4620      	mov	r0, r4
 8004352:	f000 fdaf 	bl	8004eb4 <_fflush_r>
 8004356:	68e1      	ldr	r1, [r4, #12]
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <cleanup_stdio+0x3c>)
 800435a:	4299      	cmp	r1, r3
 800435c:	d004      	beq.n	8004368 <cleanup_stdio+0x30>
 800435e:	4620      	mov	r0, r4
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	f000 bda6 	b.w	8004eb4 <_fflush_r>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	20000474 	.word	0x20000474
 8004370:	200004dc 	.word	0x200004dc
 8004374:	20000544 	.word	0x20000544

08004378 <global_stdio_init.part.0>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <global_stdio_init.part.0+0x30>)
 800437c:	4c0b      	ldr	r4, [pc, #44]	@ (80043ac <global_stdio_init.part.0+0x34>)
 800437e:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <global_stdio_init.part.0+0x38>)
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4620      	mov	r0, r4
 8004384:	2200      	movs	r2, #0
 8004386:	2104      	movs	r1, #4
 8004388:	f7ff ff94 	bl	80042b4 <std>
 800438c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004390:	2201      	movs	r2, #1
 8004392:	2109      	movs	r1, #9
 8004394:	f7ff ff8e 	bl	80042b4 <std>
 8004398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800439c:	2202      	movs	r2, #2
 800439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a2:	2112      	movs	r1, #18
 80043a4:	f7ff bf86 	b.w	80042b4 <std>
 80043a8:	200005ac 	.word	0x200005ac
 80043ac:	20000474 	.word	0x20000474
 80043b0:	08004321 	.word	0x08004321

080043b4 <__sfp_lock_acquire>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__sfp_lock_acquire+0x8>)
 80043b6:	f000 b920 	b.w	80045fa <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200005b5 	.word	0x200005b5

080043c0 <__sfp_lock_release>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__sfp_lock_release+0x8>)
 80043c2:	f000 b91b 	b.w	80045fc <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200005b5 	.word	0x200005b5

080043cc <__sinit>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	f7ff fff0 	bl	80043b4 <__sfp_lock_acquire>
 80043d4:	6a23      	ldr	r3, [r4, #32]
 80043d6:	b11b      	cbz	r3, 80043e0 <__sinit+0x14>
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f7ff bff0 	b.w	80043c0 <__sfp_lock_release>
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__sinit+0x28>)
 80043e2:	6223      	str	r3, [r4, #32]
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <__sinit+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f5      	bne.n	80043d8 <__sinit+0xc>
 80043ec:	f7ff ffc4 	bl	8004378 <global_stdio_init.part.0>
 80043f0:	e7f2      	b.n	80043d8 <__sinit+0xc>
 80043f2:	bf00      	nop
 80043f4:	08004339 	.word	0x08004339
 80043f8:	200005ac 	.word	0x200005ac

080043fc <_fwalk_sglue>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	4607      	mov	r7, r0
 8004402:	4688      	mov	r8, r1
 8004404:	4614      	mov	r4, r2
 8004406:	2600      	movs	r6, #0
 8004408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800440c:	f1b9 0901 	subs.w	r9, r9, #1
 8004410:	d505      	bpl.n	800441e <_fwalk_sglue+0x22>
 8004412:	6824      	ldr	r4, [r4, #0]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d1f7      	bne.n	8004408 <_fwalk_sglue+0xc>
 8004418:	4630      	mov	r0, r6
 800441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d907      	bls.n	8004434 <_fwalk_sglue+0x38>
 8004424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004428:	3301      	adds	r3, #1
 800442a:	d003      	beq.n	8004434 <_fwalk_sglue+0x38>
 800442c:	4629      	mov	r1, r5
 800442e:	4638      	mov	r0, r7
 8004430:	47c0      	blx	r8
 8004432:	4306      	orrs	r6, r0
 8004434:	3568      	adds	r5, #104	@ 0x68
 8004436:	e7e9      	b.n	800440c <_fwalk_sglue+0x10>

08004438 <iprintf>:
 8004438:	b40f      	push	{r0, r1, r2, r3}
 800443a:	b507      	push	{r0, r1, r2, lr}
 800443c:	4906      	ldr	r1, [pc, #24]	@ (8004458 <iprintf+0x20>)
 800443e:	ab04      	add	r3, sp, #16
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	f853 2b04 	ldr.w	r2, [r3], #4
 8004446:	6881      	ldr	r1, [r0, #8]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f000 fa09 	bl	8004860 <_vfiprintf_r>
 800444e:	b003      	add	sp, #12
 8004450:	f85d eb04 	ldr.w	lr, [sp], #4
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr
 8004458:	20000018 	.word	0x20000018

0800445c <putchar>:
 800445c:	4b02      	ldr	r3, [pc, #8]	@ (8004468 <putchar+0xc>)
 800445e:	4601      	mov	r1, r0
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	6882      	ldr	r2, [r0, #8]
 8004464:	f000 bd4e 	b.w	8004f04 <_putc_r>
 8004468:	20000018 	.word	0x20000018

0800446c <__sread>:
 800446c:	b510      	push	{r4, lr}
 800446e:	460c      	mov	r4, r1
 8004470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004474:	f000 f872 	bl	800455c <_read_r>
 8004478:	2800      	cmp	r0, #0
 800447a:	bfab      	itete	ge
 800447c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800447e:	89a3      	ldrhlt	r3, [r4, #12]
 8004480:	181b      	addge	r3, r3, r0
 8004482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004486:	bfac      	ite	ge
 8004488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800448a:	81a3      	strhlt	r3, [r4, #12]
 800448c:	bd10      	pop	{r4, pc}

0800448e <__swrite>:
 800448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	461f      	mov	r7, r3
 8004494:	898b      	ldrh	r3, [r1, #12]
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	4605      	mov	r5, r0
 800449a:	460c      	mov	r4, r1
 800449c:	4616      	mov	r6, r2
 800449e:	d505      	bpl.n	80044ac <__swrite+0x1e>
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	2302      	movs	r3, #2
 80044a6:	2200      	movs	r2, #0
 80044a8:	f000 f846 	bl	8004538 <_lseek_r>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	4632      	mov	r2, r6
 80044ba:	463b      	mov	r3, r7
 80044bc:	4628      	mov	r0, r5
 80044be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	f000 b85d 	b.w	8004580 <_write_r>

080044c6 <__sseek>:
 80044c6:	b510      	push	{r4, lr}
 80044c8:	460c      	mov	r4, r1
 80044ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ce:	f000 f833 	bl	8004538 <_lseek_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	bf15      	itete	ne
 80044d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044e2:	81a3      	strheq	r3, [r4, #12]
 80044e4:	bf18      	it	ne
 80044e6:	81a3      	strhne	r3, [r4, #12]
 80044e8:	bd10      	pop	{r4, pc}

080044ea <__sclose>:
 80044ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ee:	f000 b813 	b.w	8004518 <_close_r>
	...

080044f4 <viprintf>:
 80044f4:	460b      	mov	r3, r1
 80044f6:	4903      	ldr	r1, [pc, #12]	@ (8004504 <viprintf+0x10>)
 80044f8:	4602      	mov	r2, r0
 80044fa:	6808      	ldr	r0, [r1, #0]
 80044fc:	6881      	ldr	r1, [r0, #8]
 80044fe:	f000 b9af 	b.w	8004860 <_vfiprintf_r>
 8004502:	bf00      	nop
 8004504:	20000018 	.word	0x20000018

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <_close_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	@ (8004534 <_close_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fc81 	bl	8000e2a <_close>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_close_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_close_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	200005b0 	.word	0x200005b0

08004538 <_lseek_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d07      	ldr	r5, [pc, #28]	@ (8004558 <_lseek_r+0x20>)
 800453c:	4604      	mov	r4, r0
 800453e:	4608      	mov	r0, r1
 8004540:	4611      	mov	r1, r2
 8004542:	2200      	movs	r2, #0
 8004544:	602a      	str	r2, [r5, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f7fc fc96 	bl	8000e78 <_lseek>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_lseek_r+0x1e>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_lseek_r+0x1e>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200005b0 	.word	0x200005b0

0800455c <_read_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d07      	ldr	r5, [pc, #28]	@ (800457c <_read_r+0x20>)
 8004560:	4604      	mov	r4, r0
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	2200      	movs	r2, #0
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	f7fc fc24 	bl	8000db8 <_read>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_read_r+0x1e>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_read_r+0x1e>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	200005b0 	.word	0x200005b0

08004580 <_write_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	@ (80045a0 <_write_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fc fc2f 	bl	8000df2 <_write>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_write_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_write_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	200005b0 	.word	0x200005b0

080045a4 <__errno>:
 80045a4:	4b01      	ldr	r3, [pc, #4]	@ (80045ac <__errno+0x8>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000018 	.word	0x20000018

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4d0d      	ldr	r5, [pc, #52]	@ (80045e8 <__libc_init_array+0x38>)
 80045b4:	4c0d      	ldr	r4, [pc, #52]	@ (80045ec <__libc_init_array+0x3c>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	2600      	movs	r6, #0
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	4d0b      	ldr	r5, [pc, #44]	@ (80045f0 <__libc_init_array+0x40>)
 80045c2:	4c0c      	ldr	r4, [pc, #48]	@ (80045f4 <__libc_init_array+0x44>)
 80045c4:	f000 fdfa 	bl	80051bc <_init>
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	2600      	movs	r6, #0
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08005300 	.word	0x08005300
 80045ec:	08005300 	.word	0x08005300
 80045f0:	08005300 	.word	0x08005300
 80045f4:	08005304 	.word	0x08005304

080045f8 <__retarget_lock_init_recursive>:
 80045f8:	4770      	bx	lr

080045fa <__retarget_lock_acquire_recursive>:
 80045fa:	4770      	bx	lr

080045fc <__retarget_lock_release_recursive>:
 80045fc:	4770      	bx	lr

080045fe <memcpy>:
 80045fe:	440a      	add	r2, r1
 8004600:	4291      	cmp	r1, r2
 8004602:	f100 33ff 	add.w	r3, r0, #4294967295
 8004606:	d100      	bne.n	800460a <memcpy+0xc>
 8004608:	4770      	bx	lr
 800460a:	b510      	push	{r4, lr}
 800460c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004614:	4291      	cmp	r1, r2
 8004616:	d1f9      	bne.n	800460c <memcpy+0xe>
 8004618:	bd10      	pop	{r4, pc}
	...

0800461c <_free_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	2900      	cmp	r1, #0
 8004622:	d041      	beq.n	80046a8 <_free_r+0x8c>
 8004624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004628:	1f0c      	subs	r4, r1, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfb8      	it	lt
 800462e:	18e4      	addlt	r4, r4, r3
 8004630:	f000 f8e0 	bl	80047f4 <__malloc_lock>
 8004634:	4a1d      	ldr	r2, [pc, #116]	@ (80046ac <_free_r+0x90>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	b933      	cbnz	r3, 8004648 <_free_r+0x2c>
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	4628      	mov	r0, r5
 8004640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004644:	f000 b8dc 	b.w	8004800 <__malloc_unlock>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d908      	bls.n	800465e <_free_r+0x42>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	1821      	adds	r1, r4, r0
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	e7ed      	b.n	800463a <_free_r+0x1e>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x4c>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x42>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1850      	adds	r0, r2, r1
 800466c:	42a0      	cmp	r0, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x6c>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	4401      	add	r1, r0
 8004674:	1850      	adds	r0, r2, r1
 8004676:	4283      	cmp	r3, r0
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1e0      	bne.n	800463e <_free_r+0x22>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	4408      	add	r0, r1
 8004684:	6010      	str	r0, [r2, #0]
 8004686:	e7da      	b.n	800463e <_free_r+0x22>
 8004688:	d902      	bls.n	8004690 <_free_r+0x74>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d6      	b.n	800463e <_free_r+0x22>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf04      	itt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	6054      	str	r4, [r2, #4]
 80046a6:	e7ca      	b.n	800463e <_free_r+0x22>
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
 80046aa:	bf00      	nop
 80046ac:	200005bc 	.word	0x200005bc

080046b0 <sbrk_aligned>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4e0f      	ldr	r6, [pc, #60]	@ (80046f0 <sbrk_aligned+0x40>)
 80046b4:	460c      	mov	r4, r1
 80046b6:	6831      	ldr	r1, [r6, #0]
 80046b8:	4605      	mov	r5, r0
 80046ba:	b911      	cbnz	r1, 80046c2 <sbrk_aligned+0x12>
 80046bc:	f000 fcea 	bl	8005094 <_sbrk_r>
 80046c0:	6030      	str	r0, [r6, #0]
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fce5 	bl	8005094 <_sbrk_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d103      	bne.n	80046d6 <sbrk_aligned+0x26>
 80046ce:	f04f 34ff 	mov.w	r4, #4294967295
 80046d2:	4620      	mov	r0, r4
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d0f8      	beq.n	80046d2 <sbrk_aligned+0x22>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fcd6 	bl	8005094 <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d1f2      	bne.n	80046d2 <sbrk_aligned+0x22>
 80046ec:	e7ef      	b.n	80046ce <sbrk_aligned+0x1e>
 80046ee:	bf00      	nop
 80046f0:	200005b8 	.word	0x200005b8

080046f4 <_malloc_r>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	1ccd      	adds	r5, r1, #3
 80046fa:	f025 0503 	bic.w	r5, r5, #3
 80046fe:	3508      	adds	r5, #8
 8004700:	2d0c      	cmp	r5, #12
 8004702:	bf38      	it	cc
 8004704:	250c      	movcc	r5, #12
 8004706:	2d00      	cmp	r5, #0
 8004708:	4606      	mov	r6, r0
 800470a:	db01      	blt.n	8004710 <_malloc_r+0x1c>
 800470c:	42a9      	cmp	r1, r5
 800470e:	d904      	bls.n	800471a <_malloc_r+0x26>
 8004710:	230c      	movs	r3, #12
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	2000      	movs	r0, #0
 8004716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047f0 <_malloc_r+0xfc>
 800471e:	f000 f869 	bl	80047f4 <__malloc_lock>
 8004722:	f8d8 3000 	ldr.w	r3, [r8]
 8004726:	461c      	mov	r4, r3
 8004728:	bb44      	cbnz	r4, 800477c <_malloc_r+0x88>
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff ffbf 	bl	80046b0 <sbrk_aligned>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	4604      	mov	r4, r0
 8004736:	d158      	bne.n	80047ea <_malloc_r+0xf6>
 8004738:	f8d8 4000 	ldr.w	r4, [r8]
 800473c:	4627      	mov	r7, r4
 800473e:	2f00      	cmp	r7, #0
 8004740:	d143      	bne.n	80047ca <_malloc_r+0xd6>
 8004742:	2c00      	cmp	r4, #0
 8004744:	d04b      	beq.n	80047de <_malloc_r+0xea>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	4639      	mov	r1, r7
 800474a:	4630      	mov	r0, r6
 800474c:	eb04 0903 	add.w	r9, r4, r3
 8004750:	f000 fca0 	bl	8005094 <_sbrk_r>
 8004754:	4581      	cmp	r9, r0
 8004756:	d142      	bne.n	80047de <_malloc_r+0xea>
 8004758:	6821      	ldr	r1, [r4, #0]
 800475a:	1a6d      	subs	r5, r5, r1
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff ffa6 	bl	80046b0 <sbrk_aligned>
 8004764:	3001      	adds	r0, #1
 8004766:	d03a      	beq.n	80047de <_malloc_r+0xea>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	442b      	add	r3, r5
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	f8d8 3000 	ldr.w	r3, [r8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	bb62      	cbnz	r2, 80047d0 <_malloc_r+0xdc>
 8004776:	f8c8 7000 	str.w	r7, [r8]
 800477a:	e00f      	b.n	800479c <_malloc_r+0xa8>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	d420      	bmi.n	80047c4 <_malloc_r+0xd0>
 8004782:	2a0b      	cmp	r2, #11
 8004784:	d917      	bls.n	80047b6 <_malloc_r+0xc2>
 8004786:	1961      	adds	r1, r4, r5
 8004788:	42a3      	cmp	r3, r4
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	bf18      	it	ne
 800478e:	6059      	strne	r1, [r3, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	bf08      	it	eq
 8004794:	f8c8 1000 	streq.w	r1, [r8]
 8004798:	5162      	str	r2, [r4, r5]
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f82f 	bl	8004800 <__malloc_unlock>
 80047a2:	f104 000b 	add.w	r0, r4, #11
 80047a6:	1d23      	adds	r3, r4, #4
 80047a8:	f020 0007 	bic.w	r0, r0, #7
 80047ac:	1ac2      	subs	r2, r0, r3
 80047ae:	bf1c      	itt	ne
 80047b0:	1a1b      	subne	r3, r3, r0
 80047b2:	50a3      	strne	r3, [r4, r2]
 80047b4:	e7af      	b.n	8004716 <_malloc_r+0x22>
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	bf0c      	ite	eq
 80047bc:	f8c8 2000 	streq.w	r2, [r8]
 80047c0:	605a      	strne	r2, [r3, #4]
 80047c2:	e7eb      	b.n	800479c <_malloc_r+0xa8>
 80047c4:	4623      	mov	r3, r4
 80047c6:	6864      	ldr	r4, [r4, #4]
 80047c8:	e7ae      	b.n	8004728 <_malloc_r+0x34>
 80047ca:	463c      	mov	r4, r7
 80047cc:	687f      	ldr	r7, [r7, #4]
 80047ce:	e7b6      	b.n	800473e <_malloc_r+0x4a>
 80047d0:	461a      	mov	r2, r3
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d1fb      	bne.n	80047d0 <_malloc_r+0xdc>
 80047d8:	2300      	movs	r3, #0
 80047da:	6053      	str	r3, [r2, #4]
 80047dc:	e7de      	b.n	800479c <_malloc_r+0xa8>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f80c 	bl	8004800 <__malloc_unlock>
 80047e8:	e794      	b.n	8004714 <_malloc_r+0x20>
 80047ea:	6005      	str	r5, [r0, #0]
 80047ec:	e7d6      	b.n	800479c <_malloc_r+0xa8>
 80047ee:	bf00      	nop
 80047f0:	200005bc 	.word	0x200005bc

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__malloc_lock+0x8>)
 80047f6:	f7ff bf00 	b.w	80045fa <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200005b4 	.word	0x200005b4

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	@ (8004808 <__malloc_unlock+0x8>)
 8004802:	f7ff befb 	b.w	80045fc <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200005b4 	.word	0x200005b4

0800480c <__sfputc_r>:
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	b410      	push	{r4}
 8004814:	6093      	str	r3, [r2, #8]
 8004816:	da08      	bge.n	800482a <__sfputc_r+0x1e>
 8004818:	6994      	ldr	r4, [r2, #24]
 800481a:	42a3      	cmp	r3, r4
 800481c:	db01      	blt.n	8004822 <__sfputc_r+0x16>
 800481e:	290a      	cmp	r1, #10
 8004820:	d103      	bne.n	800482a <__sfputc_r+0x1e>
 8004822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004826:	f000 bba1 	b.w	8004f6c <__swbuf_r>
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	1c58      	adds	r0, r3, #1
 800482e:	6010      	str	r0, [r2, #0]
 8004830:	7019      	strb	r1, [r3, #0]
 8004832:	4608      	mov	r0, r1
 8004834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004838:	4770      	bx	lr

0800483a <__sfputs_r>:
 800483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483c:	4606      	mov	r6, r0
 800483e:	460f      	mov	r7, r1
 8004840:	4614      	mov	r4, r2
 8004842:	18d5      	adds	r5, r2, r3
 8004844:	42ac      	cmp	r4, r5
 8004846:	d101      	bne.n	800484c <__sfputs_r+0x12>
 8004848:	2000      	movs	r0, #0
 800484a:	e007      	b.n	800485c <__sfputs_r+0x22>
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	463a      	mov	r2, r7
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff ffda 	bl	800480c <__sfputc_r>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d1f3      	bne.n	8004844 <__sfputs_r+0xa>
 800485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004860 <_vfiprintf_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	460d      	mov	r5, r1
 8004866:	b09d      	sub	sp, #116	@ 0x74
 8004868:	4614      	mov	r4, r2
 800486a:	4698      	mov	r8, r3
 800486c:	4606      	mov	r6, r0
 800486e:	b118      	cbz	r0, 8004878 <_vfiprintf_r+0x18>
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	b90b      	cbnz	r3, 8004878 <_vfiprintf_r+0x18>
 8004874:	f7ff fdaa 	bl	80043cc <__sinit>
 8004878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800487a:	07d9      	lsls	r1, r3, #31
 800487c:	d405      	bmi.n	800488a <_vfiprintf_r+0x2a>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	059a      	lsls	r2, r3, #22
 8004882:	d402      	bmi.n	800488a <_vfiprintf_r+0x2a>
 8004884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004886:	f7ff feb8 	bl	80045fa <__retarget_lock_acquire_recursive>
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	d501      	bpl.n	8004894 <_vfiprintf_r+0x34>
 8004890:	692b      	ldr	r3, [r5, #16]
 8004892:	b99b      	cbnz	r3, 80048bc <_vfiprintf_r+0x5c>
 8004894:	4629      	mov	r1, r5
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fba6 	bl	8004fe8 <__swsetup_r>
 800489c:	b170      	cbz	r0, 80048bc <_vfiprintf_r+0x5c>
 800489e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048a0:	07dc      	lsls	r4, r3, #31
 80048a2:	d504      	bpl.n	80048ae <_vfiprintf_r+0x4e>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	b01d      	add	sp, #116	@ 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	0598      	lsls	r0, r3, #22
 80048b2:	d4f7      	bmi.n	80048a4 <_vfiprintf_r+0x44>
 80048b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b6:	f7ff fea1 	bl	80045fc <__retarget_lock_release_recursive>
 80048ba:	e7f3      	b.n	80048a4 <_vfiprintf_r+0x44>
 80048bc:	2300      	movs	r3, #0
 80048be:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c0:	2320      	movs	r3, #32
 80048c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ca:	2330      	movs	r3, #48	@ 0x30
 80048cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a7c <_vfiprintf_r+0x21c>
 80048d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048d4:	f04f 0901 	mov.w	r9, #1
 80048d8:	4623      	mov	r3, r4
 80048da:	469a      	mov	sl, r3
 80048dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048e0:	b10a      	cbz	r2, 80048e6 <_vfiprintf_r+0x86>
 80048e2:	2a25      	cmp	r2, #37	@ 0x25
 80048e4:	d1f9      	bne.n	80048da <_vfiprintf_r+0x7a>
 80048e6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ea:	d00b      	beq.n	8004904 <_vfiprintf_r+0xa4>
 80048ec:	465b      	mov	r3, fp
 80048ee:	4622      	mov	r2, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ffa1 	bl	800483a <__sfputs_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	f000 80a7 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 80048fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004900:	445a      	add	r2, fp
 8004902:	9209      	str	r2, [sp, #36]	@ 0x24
 8004904:	f89a 3000 	ldrb.w	r3, [sl]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 809f 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 800490e:	2300      	movs	r3, #0
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004918:	f10a 0a01 	add.w	sl, sl, #1
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004924:	931a      	str	r3, [sp, #104]	@ 0x68
 8004926:	4654      	mov	r4, sl
 8004928:	2205      	movs	r2, #5
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4853      	ldr	r0, [pc, #332]	@ (8004a7c <_vfiprintf_r+0x21c>)
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	9a04      	ldr	r2, [sp, #16]
 8004936:	b9d8      	cbnz	r0, 8004970 <_vfiprintf_r+0x110>
 8004938:	06d1      	lsls	r1, r2, #27
 800493a:	bf44      	itt	mi
 800493c:	2320      	movmi	r3, #32
 800493e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004942:	0713      	lsls	r3, r2, #28
 8004944:	bf44      	itt	mi
 8004946:	232b      	movmi	r3, #43	@ 0x2b
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494c:	f89a 3000 	ldrb.w	r3, [sl]
 8004950:	2b2a      	cmp	r3, #42	@ 0x2a
 8004952:	d015      	beq.n	8004980 <_vfiprintf_r+0x120>
 8004954:	9a07      	ldr	r2, [sp, #28]
 8004956:	4654      	mov	r4, sl
 8004958:	2000      	movs	r0, #0
 800495a:	f04f 0c0a 	mov.w	ip, #10
 800495e:	4621      	mov	r1, r4
 8004960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004964:	3b30      	subs	r3, #48	@ 0x30
 8004966:	2b09      	cmp	r3, #9
 8004968:	d94b      	bls.n	8004a02 <_vfiprintf_r+0x1a2>
 800496a:	b1b0      	cbz	r0, 800499a <_vfiprintf_r+0x13a>
 800496c:	9207      	str	r2, [sp, #28]
 800496e:	e014      	b.n	800499a <_vfiprintf_r+0x13a>
 8004970:	eba0 0308 	sub.w	r3, r0, r8
 8004974:	fa09 f303 	lsl.w	r3, r9, r3
 8004978:	4313      	orrs	r3, r2
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	46a2      	mov	sl, r4
 800497e:	e7d2      	b.n	8004926 <_vfiprintf_r+0xc6>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d19      	adds	r1, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfbb      	ittet	lt
 800498c:	425b      	neglt	r3, r3
 800498e:	f042 0202 	orrlt.w	r2, r2, #2
 8004992:	9307      	strge	r3, [sp, #28]
 8004994:	9307      	strlt	r3, [sp, #28]
 8004996:	bfb8      	it	lt
 8004998:	9204      	strlt	r2, [sp, #16]
 800499a:	7823      	ldrb	r3, [r4, #0]
 800499c:	2b2e      	cmp	r3, #46	@ 0x2e
 800499e:	d10a      	bne.n	80049b6 <_vfiprintf_r+0x156>
 80049a0:	7863      	ldrb	r3, [r4, #1]
 80049a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a4:	d132      	bne.n	8004a0c <_vfiprintf_r+0x1ac>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9203      	str	r2, [sp, #12]
 80049ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049b2:	3402      	adds	r4, #2
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a8c <_vfiprintf_r+0x22c>
 80049ba:	7821      	ldrb	r1, [r4, #0]
 80049bc:	2203      	movs	r2, #3
 80049be:	4650      	mov	r0, sl
 80049c0:	f7fb fc0e 	bl	80001e0 <memchr>
 80049c4:	b138      	cbz	r0, 80049d6 <_vfiprintf_r+0x176>
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	eba0 000a 	sub.w	r0, r0, sl
 80049cc:	2240      	movs	r2, #64	@ 0x40
 80049ce:	4082      	lsls	r2, r0
 80049d0:	4313      	orrs	r3, r2
 80049d2:	3401      	adds	r4, #1
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049da:	4829      	ldr	r0, [pc, #164]	@ (8004a80 <_vfiprintf_r+0x220>)
 80049dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049e0:	2206      	movs	r2, #6
 80049e2:	f7fb fbfd 	bl	80001e0 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d03f      	beq.n	8004a6a <_vfiprintf_r+0x20a>
 80049ea:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <_vfiprintf_r+0x224>)
 80049ec:	bb1b      	cbnz	r3, 8004a36 <_vfiprintf_r+0x1d6>
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	3307      	adds	r3, #7
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	3308      	adds	r3, #8
 80049f8:	9303      	str	r3, [sp, #12]
 80049fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fc:	443b      	add	r3, r7
 80049fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a00:	e76a      	b.n	80048d8 <_vfiprintf_r+0x78>
 8004a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a06:	460c      	mov	r4, r1
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7a8      	b.n	800495e <_vfiprintf_r+0xfe>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 0c0a 	mov.w	ip, #10
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a1e:	3a30      	subs	r2, #48	@ 0x30
 8004a20:	2a09      	cmp	r2, #9
 8004a22:	d903      	bls.n	8004a2c <_vfiprintf_r+0x1cc>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0c6      	beq.n	80049b6 <_vfiprintf_r+0x156>
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	e7c4      	b.n	80049b6 <_vfiprintf_r+0x156>
 8004a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a30:	4604      	mov	r4, r0
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7f0      	b.n	8004a18 <_vfiprintf_r+0x1b8>
 8004a36:	ab03      	add	r3, sp, #12
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a3e:	a904      	add	r1, sp, #16
 8004a40:	4630      	mov	r0, r6
 8004a42:	f3af 8000 	nop.w
 8004a46:	4607      	mov	r7, r0
 8004a48:	1c78      	adds	r0, r7, #1
 8004a4a:	d1d6      	bne.n	80049fa <_vfiprintf_r+0x19a>
 8004a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	d405      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	059a      	lsls	r2, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a5a:	f7ff fdcf 	bl	80045fc <__retarget_lock_release_recursive>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af1f 	bmi.w	80048a4 <_vfiprintf_r+0x44>
 8004a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a68:	e71e      	b.n	80048a8 <_vfiprintf_r+0x48>
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f879 	bl	8004b6c <_printf_i>
 8004a7a:	e7e4      	b.n	8004a46 <_vfiprintf_r+0x1e6>
 8004a7c:	080052c4 	.word	0x080052c4
 8004a80:	080052ce 	.word	0x080052ce
 8004a84:	00000000 	.word	0x00000000
 8004a88:	0800483b 	.word	0x0800483b
 8004a8c:	080052ca 	.word	0x080052ca

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4698      	mov	r8, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	3b00      	subs	r3, #0
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004aec:	4641      	mov	r1, r8
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c8      	blx	r9
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf02      	ittt	eq
 8004b02:	68e5      	ldreq	r5, [r4, #12]
 8004b04:	6833      	ldreq	r3, [r6, #0]
 8004b06:	1aed      	subeq	r5, r5, r3
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c8      	blx	r9
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	@ 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c8      	blx	r9
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b74:	2f78      	cmp	r7, #120	@ 0x78
 8004b76:	4691      	mov	r9, r2
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	@ 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d2 	beq.w	8004d32 <_printf_i+0x1c6>
 8004b8e:	2f58      	cmp	r7, #88	@ 0x58
 8004b90:	f000 80b9 	beq.w	8004d06 <_printf_i+0x19a>
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d19 	.word	0x08004d19
 8004bdc:	08004c43 	.word	0x08004c43
 8004be0:	08004cd3 	.word	0x08004cd3
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d3b 	.word	0x08004d3b
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c43 	.word	0x08004c43
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004cdb 	.word	0x08004cdb
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6032      	str	r2, [r6, #0]
 8004c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e09d      	b.n	8004d54 <_printf_i+0x1e8>
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	6031      	str	r1, [r6, #0]
 8004c20:	0606      	lsls	r6, r0, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xbc>
 8004c24:	681d      	ldr	r5, [r3, #0]
 8004c26:	e003      	b.n	8004c30 <_printf_i+0xc4>
 8004c28:	0645      	lsls	r5, r0, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xb8>
 8004c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	da03      	bge.n	8004c3c <_printf_i+0xd0>
 8004c34:	232d      	movs	r3, #45	@ 0x2d
 8004c36:	426d      	negs	r5, r5
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3c:	4859      	ldr	r0, [pc, #356]	@ (8004da4 <_printf_i+0x238>)
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e011      	b.n	8004c66 <_printf_i+0xfa>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	0608      	lsls	r0, r1, #24
 8004c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c4c:	d402      	bmi.n	8004c54 <_printf_i+0xe8>
 8004c4e:	0649      	lsls	r1, r1, #25
 8004c50:	bf48      	it	mi
 8004c52:	b2ad      	uxthmi	r5, r5
 8004c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c56:	4853      	ldr	r0, [pc, #332]	@ (8004da4 <_printf_i+0x238>)
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	bf14      	ite	ne
 8004c5c:	230a      	movne	r3, #10
 8004c5e:	2308      	moveq	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c66:	6866      	ldr	r6, [r4, #4]
 8004c68:	60a6      	str	r6, [r4, #8]
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	bfa2      	ittt	ge
 8004c6e:	6821      	ldrge	r1, [r4, #0]
 8004c70:	f021 0104 	bicge.w	r1, r1, #4
 8004c74:	6021      	strge	r1, [r4, #0]
 8004c76:	b90d      	cbnz	r5, 8004c7c <_printf_i+0x110>
 8004c78:	2e00      	cmp	r6, #0
 8004c7a:	d04b      	beq.n	8004d14 <_printf_i+0x1a8>
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c82:	fb03 5711 	mls	r7, r3, r1, r5
 8004c86:	5dc7      	ldrb	r7, [r0, r7]
 8004c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c8c:	462f      	mov	r7, r5
 8004c8e:	42bb      	cmp	r3, r7
 8004c90:	460d      	mov	r5, r1
 8004c92:	d9f4      	bls.n	8004c7e <_printf_i+0x112>
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d10b      	bne.n	8004cb0 <_printf_i+0x144>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	07df      	lsls	r7, r3, #31
 8004c9c:	d508      	bpl.n	8004cb0 <_printf_i+0x144>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	6861      	ldr	r1, [r4, #4]
 8004ca2:	4299      	cmp	r1, r3
 8004ca4:	bfde      	ittt	le
 8004ca6:	2330      	movle	r3, #48	@ 0x30
 8004ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb0:	1b92      	subs	r2, r2, r6
 8004cb2:	6122      	str	r2, [r4, #16]
 8004cb4:	f8cd a000 	str.w	sl, [sp]
 8004cb8:	464b      	mov	r3, r9
 8004cba:	aa03      	add	r2, sp, #12
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f7ff fee6 	bl	8004a90 <_printf_common>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d14a      	bne.n	8004d5e <_printf_i+0x1f2>
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	b004      	add	sp, #16
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	f043 0320 	orr.w	r3, r3, #32
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	4833      	ldr	r0, [pc, #204]	@ (8004da8 <_printf_i+0x23c>)
 8004cdc:	2778      	movs	r7, #120	@ 0x78
 8004cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	6831      	ldr	r1, [r6, #0]
 8004ce6:	061f      	lsls	r7, r3, #24
 8004ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cec:	d402      	bmi.n	8004cf4 <_printf_i+0x188>
 8004cee:	065f      	lsls	r7, r3, #25
 8004cf0:	bf48      	it	mi
 8004cf2:	b2ad      	uxthmi	r5, r5
 8004cf4:	6031      	str	r1, [r6, #0]
 8004cf6:	07d9      	lsls	r1, r3, #31
 8004cf8:	bf44      	itt	mi
 8004cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfe:	6023      	strmi	r3, [r4, #0]
 8004d00:	b11d      	cbz	r5, 8004d0a <_printf_i+0x19e>
 8004d02:	2310      	movs	r3, #16
 8004d04:	e7ac      	b.n	8004c60 <_printf_i+0xf4>
 8004d06:	4827      	ldr	r0, [pc, #156]	@ (8004da4 <_printf_i+0x238>)
 8004d08:	e7e9      	b.n	8004cde <_printf_i+0x172>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f023 0320 	bic.w	r3, r3, #32
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	e7f6      	b.n	8004d02 <_printf_i+0x196>
 8004d14:	4616      	mov	r6, r2
 8004d16:	e7bd      	b.n	8004c94 <_printf_i+0x128>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	1d18      	adds	r0, r3, #4
 8004d20:	6030      	str	r0, [r6, #0]
 8004d22:	062e      	lsls	r6, r5, #24
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0x1c0>
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0x1c6>
 8004d2c:	0668      	lsls	r0, r5, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0x1bc>
 8004d30:	8019      	strh	r1, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	4616      	mov	r6, r2
 8004d38:	e7bc      	b.n	8004cb4 <_printf_i+0x148>
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	6032      	str	r2, [r6, #0]
 8004d40:	681e      	ldr	r6, [r3, #0]
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	2100      	movs	r1, #0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7fb fa4a 	bl	80001e0 <memchr>
 8004d4c:	b108      	cbz	r0, 8004d52 <_printf_i+0x1e6>
 8004d4e:	1b80      	subs	r0, r0, r6
 8004d50:	6060      	str	r0, [r4, #4]
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	2300      	movs	r3, #0
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5c:	e7aa      	b.n	8004cb4 <_printf_i+0x148>
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d0ad      	beq.n	8004cc8 <_printf_i+0x15c>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	079b      	lsls	r3, r3, #30
 8004d70:	d413      	bmi.n	8004d9a <_printf_i+0x22e>
 8004d72:	68e0      	ldr	r0, [r4, #12]
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	4298      	cmp	r0, r3
 8004d78:	bfb8      	it	lt
 8004d7a:	4618      	movlt	r0, r3
 8004d7c:	e7a6      	b.n	8004ccc <_printf_i+0x160>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4632      	mov	r2, r6
 8004d82:	4649      	mov	r1, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	47d0      	blx	sl
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d09d      	beq.n	8004cc8 <_printf_i+0x15c>
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	9903      	ldr	r1, [sp, #12]
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dcf2      	bgt.n	8004d7e <_printf_i+0x212>
 8004d98:	e7eb      	b.n	8004d72 <_printf_i+0x206>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	f104 0619 	add.w	r6, r4, #25
 8004da0:	e7f5      	b.n	8004d8e <_printf_i+0x222>
 8004da2:	bf00      	nop
 8004da4:	080052d5 	.word	0x080052d5
 8004da8:	080052e6 	.word	0x080052e6

08004dac <__sflush_r>:
 8004dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	0716      	lsls	r6, r2, #28
 8004db6:	4605      	mov	r5, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	d454      	bmi.n	8004e66 <__sflush_r+0xba>
 8004dbc:	684b      	ldr	r3, [r1, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dc02      	bgt.n	8004dc8 <__sflush_r+0x1c>
 8004dc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd48      	ble.n	8004e5a <__sflush_r+0xae>
 8004dc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d045      	beq.n	8004e5a <__sflush_r+0xae>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dd4:	682f      	ldr	r7, [r5, #0]
 8004dd6:	6a21      	ldr	r1, [r4, #32]
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	d030      	beq.n	8004e3e <__sflush_r+0x92>
 8004ddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	0759      	lsls	r1, r3, #29
 8004de2:	d505      	bpl.n	8004df0 <__sflush_r+0x44>
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dea:	b10b      	cbz	r3, 8004df0 <__sflush_r+0x44>
 8004dec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df4:	6a21      	ldr	r1, [r4, #32]
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	d106      	bne.n	8004e0e <__sflush_r+0x62>
 8004e00:	6829      	ldr	r1, [r5, #0]
 8004e02:	291d      	cmp	r1, #29
 8004e04:	d82b      	bhi.n	8004e5e <__sflush_r+0xb2>
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <__sflush_r+0x104>)
 8004e08:	410a      	asrs	r2, r1
 8004e0a:	07d6      	lsls	r6, r2, #31
 8004e0c:	d427      	bmi.n	8004e5e <__sflush_r+0xb2>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6062      	str	r2, [r4, #4]
 8004e12:	04d9      	lsls	r1, r3, #19
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	d504      	bpl.n	8004e24 <__sflush_r+0x78>
 8004e1a:	1c42      	adds	r2, r0, #1
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0x76>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	b903      	cbnz	r3, 8004e24 <__sflush_r+0x78>
 8004e22:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e26:	602f      	str	r7, [r5, #0]
 8004e28:	b1b9      	cbz	r1, 8004e5a <__sflush_r+0xae>
 8004e2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d002      	beq.n	8004e38 <__sflush_r+0x8c>
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7ff fbf2 	bl	800461c <_free_r>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e3c:	e00d      	b.n	8004e5a <__sflush_r+0xae>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	4602      	mov	r2, r0
 8004e46:	1c50      	adds	r0, r2, #1
 8004e48:	d1c9      	bne.n	8004dde <__sflush_r+0x32>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0c6      	beq.n	8004dde <__sflush_r+0x32>
 8004e50:	2b1d      	cmp	r3, #29
 8004e52:	d001      	beq.n	8004e58 <__sflush_r+0xac>
 8004e54:	2b16      	cmp	r3, #22
 8004e56:	d11e      	bne.n	8004e96 <__sflush_r+0xea>
 8004e58:	602f      	str	r7, [r5, #0]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e022      	b.n	8004ea4 <__sflush_r+0xf8>
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	e01b      	b.n	8004e9e <__sflush_r+0xf2>
 8004e66:	690f      	ldr	r7, [r1, #16]
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	d0f6      	beq.n	8004e5a <__sflush_r+0xae>
 8004e6c:	0793      	lsls	r3, r2, #30
 8004e6e:	680e      	ldr	r6, [r1, #0]
 8004e70:	bf08      	it	eq
 8004e72:	694b      	ldreq	r3, [r1, #20]
 8004e74:	600f      	str	r7, [r1, #0]
 8004e76:	bf18      	it	ne
 8004e78:	2300      	movne	r3, #0
 8004e7a:	eba6 0807 	sub.w	r8, r6, r7
 8004e7e:	608b      	str	r3, [r1, #8]
 8004e80:	f1b8 0f00 	cmp.w	r8, #0
 8004e84:	dde9      	ble.n	8004e5a <__sflush_r+0xae>
 8004e86:	6a21      	ldr	r1, [r4, #32]
 8004e88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	2800      	cmp	r0, #0
 8004e94:	dc08      	bgt.n	8004ea8 <__sflush_r+0xfc>
 8004e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4407      	add	r7, r0
 8004eaa:	eba8 0800 	sub.w	r8, r8, r0
 8004eae:	e7e7      	b.n	8004e80 <__sflush_r+0xd4>
 8004eb0:	dfbffffe 	.word	0xdfbffffe

08004eb4 <_fflush_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	690b      	ldr	r3, [r1, #16]
 8004eb8:	4605      	mov	r5, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b913      	cbnz	r3, 8004ec4 <_fflush_r+0x10>
 8004ebe:	2500      	movs	r5, #0
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	b118      	cbz	r0, 8004ece <_fflush_r+0x1a>
 8004ec6:	6a03      	ldr	r3, [r0, #32]
 8004ec8:	b90b      	cbnz	r3, 8004ece <_fflush_r+0x1a>
 8004eca:	f7ff fa7f 	bl	80043cc <__sinit>
 8004ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f3      	beq.n	8004ebe <_fflush_r+0xa>
 8004ed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ed8:	07d0      	lsls	r0, r2, #31
 8004eda:	d404      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004edc:	0599      	lsls	r1, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee2:	f7ff fb8a 	bl	80045fa <__retarget_lock_acquire_recursive>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f7ff ff5f 	bl	8004dac <__sflush_r>
 8004eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ef0:	07da      	lsls	r2, r3, #31
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	d4e4      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	059b      	lsls	r3, r3, #22
 8004efa:	d4e1      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efe:	f7ff fb7d 	bl	80045fc <__retarget_lock_release_recursive>
 8004f02:	e7dd      	b.n	8004ec0 <_fflush_r+0xc>

08004f04 <_putc_r>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	460d      	mov	r5, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	b118      	cbz	r0, 8004f16 <_putc_r+0x12>
 8004f0e:	6a03      	ldr	r3, [r0, #32]
 8004f10:	b90b      	cbnz	r3, 8004f16 <_putc_r+0x12>
 8004f12:	f7ff fa5b 	bl	80043cc <__sinit>
 8004f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f18:	07d8      	lsls	r0, r3, #31
 8004f1a:	d405      	bmi.n	8004f28 <_putc_r+0x24>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	0599      	lsls	r1, r3, #22
 8004f20:	d402      	bmi.n	8004f28 <_putc_r+0x24>
 8004f22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f24:	f7ff fb69 	bl	80045fa <__retarget_lock_acquire_recursive>
 8004f28:	68a3      	ldr	r3, [r4, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	60a3      	str	r3, [r4, #8]
 8004f30:	da05      	bge.n	8004f3e <_putc_r+0x3a>
 8004f32:	69a2      	ldr	r2, [r4, #24]
 8004f34:	4293      	cmp	r3, r2
 8004f36:	db12      	blt.n	8004f5e <_putc_r+0x5a>
 8004f38:	b2eb      	uxtb	r3, r5
 8004f3a:	2b0a      	cmp	r3, #10
 8004f3c:	d00f      	beq.n	8004f5e <_putc_r+0x5a>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	6022      	str	r2, [r4, #0]
 8004f44:	701d      	strb	r5, [r3, #0]
 8004f46:	b2ed      	uxtb	r5, r5
 8004f48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f4a:	07da      	lsls	r2, r3, #31
 8004f4c:	d405      	bmi.n	8004f5a <_putc_r+0x56>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	059b      	lsls	r3, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_putc_r+0x56>
 8004f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f56:	f7ff fb51 	bl	80045fc <__retarget_lock_release_recursive>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4622      	mov	r2, r4
 8004f62:	4630      	mov	r0, r6
 8004f64:	f000 f802 	bl	8004f6c <__swbuf_r>
 8004f68:	4605      	mov	r5, r0
 8004f6a:	e7ed      	b.n	8004f48 <_putc_r+0x44>

08004f6c <__swbuf_r>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	460e      	mov	r6, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	4605      	mov	r5, r0
 8004f74:	b118      	cbz	r0, 8004f7e <__swbuf_r+0x12>
 8004f76:	6a03      	ldr	r3, [r0, #32]
 8004f78:	b90b      	cbnz	r3, 8004f7e <__swbuf_r+0x12>
 8004f7a:	f7ff fa27 	bl	80043cc <__sinit>
 8004f7e:	69a3      	ldr	r3, [r4, #24]
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	071a      	lsls	r2, r3, #28
 8004f86:	d501      	bpl.n	8004f8c <__swbuf_r+0x20>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	b943      	cbnz	r3, 8004f9e <__swbuf_r+0x32>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f82a 	bl	8004fe8 <__swsetup_r>
 8004f94:	b118      	cbz	r0, 8004f9e <__swbuf_r+0x32>
 8004f96:	f04f 37ff 	mov.w	r7, #4294967295
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	1a98      	subs	r0, r3, r2
 8004fa4:	6963      	ldr	r3, [r4, #20]
 8004fa6:	b2f6      	uxtb	r6, r6
 8004fa8:	4283      	cmp	r3, r0
 8004faa:	4637      	mov	r7, r6
 8004fac:	dc05      	bgt.n	8004fba <__swbuf_r+0x4e>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f7ff ff7f 	bl	8004eb4 <_fflush_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1ed      	bne.n	8004f96 <__swbuf_r+0x2a>
 8004fba:	68a3      	ldr	r3, [r4, #8]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	701e      	strb	r6, [r3, #0]
 8004fc8:	6962      	ldr	r2, [r4, #20]
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d004      	beq.n	8004fda <__swbuf_r+0x6e>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d5e1      	bpl.n	8004f9a <__swbuf_r+0x2e>
 8004fd6:	2e0a      	cmp	r6, #10
 8004fd8:	d1df      	bne.n	8004f9a <__swbuf_r+0x2e>
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7ff ff69 	bl	8004eb4 <_fflush_r>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0d9      	beq.n	8004f9a <__swbuf_r+0x2e>
 8004fe6:	e7d6      	b.n	8004f96 <__swbuf_r+0x2a>

08004fe8 <__swsetup_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <__swsetup_r+0xa8>)
 8004fec:	4605      	mov	r5, r0
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	b118      	cbz	r0, 8004ffc <__swsetup_r+0x14>
 8004ff4:	6a03      	ldr	r3, [r0, #32]
 8004ff6:	b90b      	cbnz	r3, 8004ffc <__swsetup_r+0x14>
 8004ff8:	f7ff f9e8 	bl	80043cc <__sinit>
 8004ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005000:	0719      	lsls	r1, r3, #28
 8005002:	d422      	bmi.n	800504a <__swsetup_r+0x62>
 8005004:	06da      	lsls	r2, r3, #27
 8005006:	d407      	bmi.n	8005018 <__swsetup_r+0x30>
 8005008:	2209      	movs	r2, #9
 800500a:	602a      	str	r2, [r5, #0]
 800500c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e033      	b.n	8005080 <__swsetup_r+0x98>
 8005018:	0758      	lsls	r0, r3, #29
 800501a:	d512      	bpl.n	8005042 <__swsetup_r+0x5a>
 800501c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800501e:	b141      	cbz	r1, 8005032 <__swsetup_r+0x4a>
 8005020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005024:	4299      	cmp	r1, r3
 8005026:	d002      	beq.n	800502e <__swsetup_r+0x46>
 8005028:	4628      	mov	r0, r5
 800502a:	f7ff faf7 	bl	800461c <_free_r>
 800502e:	2300      	movs	r3, #0
 8005030:	6363      	str	r3, [r4, #52]	@ 0x34
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	2300      	movs	r3, #0
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	b94b      	cbnz	r3, 8005062 <__swsetup_r+0x7a>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005058:	d003      	beq.n	8005062 <__swsetup_r+0x7a>
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 f84f 	bl	8005100 <__smakebuf_r>
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	f013 0201 	ands.w	r2, r3, #1
 800506a:	d00a      	beq.n	8005082 <__swsetup_r+0x9a>
 800506c:	2200      	movs	r2, #0
 800506e:	60a2      	str	r2, [r4, #8]
 8005070:	6962      	ldr	r2, [r4, #20]
 8005072:	4252      	negs	r2, r2
 8005074:	61a2      	str	r2, [r4, #24]
 8005076:	6922      	ldr	r2, [r4, #16]
 8005078:	b942      	cbnz	r2, 800508c <__swsetup_r+0xa4>
 800507a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800507e:	d1c5      	bne.n	800500c <__swsetup_r+0x24>
 8005080:	bd38      	pop	{r3, r4, r5, pc}
 8005082:	0799      	lsls	r1, r3, #30
 8005084:	bf58      	it	pl
 8005086:	6962      	ldrpl	r2, [r4, #20]
 8005088:	60a2      	str	r2, [r4, #8]
 800508a:	e7f4      	b.n	8005076 <__swsetup_r+0x8e>
 800508c:	2000      	movs	r0, #0
 800508e:	e7f7      	b.n	8005080 <__swsetup_r+0x98>
 8005090:	20000018 	.word	0x20000018

08005094 <_sbrk_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d06      	ldr	r5, [pc, #24]	@ (80050b0 <_sbrk_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fb fef8 	bl	8000e94 <_sbrk>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_sbrk_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_sbrk_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	200005b0 	.word	0x200005b0

080050b4 <__swhatbuf_r>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	460c      	mov	r4, r1
 80050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050bc:	2900      	cmp	r1, #0
 80050be:	b096      	sub	sp, #88	@ 0x58
 80050c0:	4615      	mov	r5, r2
 80050c2:	461e      	mov	r6, r3
 80050c4:	da0d      	bge.n	80050e2 <__swhatbuf_r+0x2e>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	bf14      	ite	ne
 80050d2:	2340      	movne	r3, #64	@ 0x40
 80050d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050d8:	2000      	movs	r0, #0
 80050da:	6031      	str	r1, [r6, #0]
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	b016      	add	sp, #88	@ 0x58
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	466a      	mov	r2, sp
 80050e4:	f000 f848 	bl	8005178 <_fstat_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	dbec      	blt.n	80050c6 <__swhatbuf_r+0x12>
 80050ec:	9901      	ldr	r1, [sp, #4]
 80050ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050f6:	4259      	negs	r1, r3
 80050f8:	4159      	adcs	r1, r3
 80050fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050fe:	e7eb      	b.n	80050d8 <__swhatbuf_r+0x24>

08005100 <__smakebuf_r>:
 8005100:	898b      	ldrh	r3, [r1, #12]
 8005102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005104:	079d      	lsls	r5, r3, #30
 8005106:	4606      	mov	r6, r0
 8005108:	460c      	mov	r4, r1
 800510a:	d507      	bpl.n	800511c <__smakebuf_r+0x1c>
 800510c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	2301      	movs	r3, #1
 8005116:	6163      	str	r3, [r4, #20]
 8005118:	b003      	add	sp, #12
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511c:	ab01      	add	r3, sp, #4
 800511e:	466a      	mov	r2, sp
 8005120:	f7ff ffc8 	bl	80050b4 <__swhatbuf_r>
 8005124:	9f00      	ldr	r7, [sp, #0]
 8005126:	4605      	mov	r5, r0
 8005128:	4639      	mov	r1, r7
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff fae2 	bl	80046f4 <_malloc_r>
 8005130:	b948      	cbnz	r0, 8005146 <__smakebuf_r+0x46>
 8005132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005136:	059a      	lsls	r2, r3, #22
 8005138:	d4ee      	bmi.n	8005118 <__smakebuf_r+0x18>
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	e7e2      	b.n	800510c <__smakebuf_r+0xc>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	6020      	str	r0, [r4, #0]
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005156:	b15b      	cbz	r3, 8005170 <__smakebuf_r+0x70>
 8005158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515c:	4630      	mov	r0, r6
 800515e:	f000 f81d 	bl	800519c <_isatty_r>
 8005162:	b128      	cbz	r0, 8005170 <__smakebuf_r+0x70>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	81a3      	strh	r3, [r4, #12]
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	431d      	orrs	r5, r3
 8005174:	81a5      	strh	r5, [r4, #12]
 8005176:	e7cf      	b.n	8005118 <__smakebuf_r+0x18>

08005178 <_fstat_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d07      	ldr	r5, [pc, #28]	@ (8005198 <_fstat_r+0x20>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	f7fb fe5c 	bl	8000e42 <_fstat>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d102      	bne.n	8005194 <_fstat_r+0x1c>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	b103      	cbz	r3, 8005194 <_fstat_r+0x1c>
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	bf00      	nop
 8005198:	200005b0 	.word	0x200005b0

0800519c <_isatty_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4d06      	ldr	r5, [pc, #24]	@ (80051b8 <_isatty_r+0x1c>)
 80051a0:	2300      	movs	r3, #0
 80051a2:	4604      	mov	r4, r0
 80051a4:	4608      	mov	r0, r1
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	f7fb fe5b 	bl	8000e62 <_isatty>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_isatty_r+0x1a>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_isatty_r+0x1a>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	200005b0 	.word	0x200005b0

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
