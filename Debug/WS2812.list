
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005300  08005300  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005308  08005308  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005310  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000068  08005378  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08005378  000074f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e782  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b2  00000000  00000000  0001581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00017ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  00018850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017809  00000000  00000000  000192d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb68  00000000  00000000  00030ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090347  00000000  00000000  00040641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  000d09cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d4a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051b8 	.word	0x080051b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080051b8 	.word	0x080051b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Log>:
#define COLOR_MAGENTA "\x1b[35m"
#define COLOR_CYAN    "\x1b[36m"

extern enum LogLevel level;

void Log(UART_HandleTypeDef *huart,LogLevel level, const char *format, ...) {
 8000570:	b40c      	push	{r2, r3}
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]
    va_list args;
    va_start(args, format);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	60fb      	str	r3, [r7, #12]

    switch (level) {
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d826      	bhi.n	80005d8 <Log+0x68>
 800058a:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <Log+0x20>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005af 	.word	0x080005af
 8000598:	080005bd 	.word	0x080005bd
 800059c:	080005cb 	.word	0x080005cb
        case LOG_LEVEL_INFO:
        	//HAL_UART_Transmit(huart, COLOR_GREEN, sizeof(COLOR_GREEN), 100);
            printf(COLOR_GREEN);
 80005a0:	4818      	ldr	r0, [pc, #96]	@ (8000604 <Log+0x94>)
 80005a2:	f003 ff47 	bl	8004434 <iprintf>
            printf("[INFO]: ");
 80005a6:	4818      	ldr	r0, [pc, #96]	@ (8000608 <Log+0x98>)
 80005a8:	f003 ff44 	bl	8004434 <iprintf>
            break;
 80005ac:	e018      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_WARNING:
            printf(COLOR_YELLOW);
 80005ae:	4817      	ldr	r0, [pc, #92]	@ (800060c <Log+0x9c>)
 80005b0:	f003 ff40 	bl	8004434 <iprintf>
            printf("[WARNING]: ");
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <Log+0xa0>)
 80005b6:	f003 ff3d 	bl	8004434 <iprintf>
            break;
 80005ba:	e011      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_VERBOSE:
            printf(COLOR_CYAN);
 80005bc:	4815      	ldr	r0, [pc, #84]	@ (8000614 <Log+0xa4>)
 80005be:	f003 ff39 	bl	8004434 <iprintf>
            printf("[VERBOSE]: ");
 80005c2:	4815      	ldr	r0, [pc, #84]	@ (8000618 <Log+0xa8>)
 80005c4:	f003 ff36 	bl	8004434 <iprintf>
            break;
 80005c8:	e00a      	b.n	80005e0 <Log+0x70>
        case LOG_LEVEL_ERROR:
             printf(COLOR_RED);
 80005ca:	4814      	ldr	r0, [pc, #80]	@ (800061c <Log+0xac>)
 80005cc:	f003 ff32 	bl	8004434 <iprintf>
             printf("[ERROR]: ");
 80005d0:	4813      	ldr	r0, [pc, #76]	@ (8000620 <Log+0xb0>)
 80005d2:	f003 ff2f 	bl	8004434 <iprintf>
             break;
 80005d6:	e003      	b.n	80005e0 <Log+0x70>
        default:
            printf(COLOR_RESET);
 80005d8:	4812      	ldr	r0, [pc, #72]	@ (8000624 <Log+0xb4>)
 80005da:	f003 ff2b 	bl	8004434 <iprintf>
            break;
 80005de:	bf00      	nop
    }

    vprintf(format, args);
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	69b8      	ldr	r0, [r7, #24]
 80005e4:	f003 ff84 	bl	80044f0 <viprintf>
    printf(COLOR_RESET);
 80005e8:	480e      	ldr	r0, [pc, #56]	@ (8000624 <Log+0xb4>)
 80005ea:	f003 ff23 	bl	8004434 <iprintf>
    printf("\n");
 80005ee:	200a      	movs	r0, #10
 80005f0:	f003 ff32 	bl	8004458 <putchar>

    va_end(args);
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fe:	b002      	add	sp, #8
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	080051d0 	.word	0x080051d0
 8000608:	080051d8 	.word	0x080051d8
 800060c:	080051e4 	.word	0x080051e4
 8000610:	080051ec 	.word	0x080051ec
 8000614:	080051f8 	.word	0x080051f8
 8000618:	08005200 	.word	0x08005200
 800061c:	0800520c 	.word	0x0800520c
 8000620:	08005214 	.word	0x08005214
 8000624:	08005220 	.word	0x08005220

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fdbb 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f85b 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f9f9 	bl	8000a2c <MX_GPIO_Init>
  MX_DMA_Init();
 800063a:	f000 f9d7 	bl	80009ec <MX_DMA_Init>
  MX_TIM1_Init();
 800063e:	f000 f8bd 	bl	80007bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f9a9 	bl	8000998 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000646:	f000 f959 	bl	80008fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800064a:	4824      	ldr	r0, [pc, #144]	@ (80006dc <main+0xb4>)
 800064c:	f002 f912 	bl	8002874 <HAL_TIM_Base_Start_IT>
  uint8_t led_colors[NUM_LEDS][3] = {
 8000650:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <main+0xb8>)
 8000652:	463b      	mov	r3, r7
 8000654:	ca07      	ldmia	r2, {r0, r1, r2}
 8000656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            {0, 0, 0},  // Green
            {0, 0, 0},  // Blue
            {0, 0, 0} // Yellow
        };
 // WS2812SendColors(led_colors, NUM_LEDS);
  ws2812_init(&htim1, &hdma_tim1_ch1, TIM_CHANNEL_1);
 800065a:	2200      	movs	r2, #0
 800065c:	4921      	ldr	r1, [pc, #132]	@ (80006e4 <main+0xbc>)
 800065e:	4822      	ldr	r0, [pc, #136]	@ (80006e8 <main+0xc0>)
 8000660:	f000 fc76 	bl	8000f50 <ws2812_init>
  ws2812_set_colors(&htim1, &led_colors, NUM_LEDS);
 8000664:	463b      	mov	r3, r7
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <main+0xc0>)
 800066c:	f000 fca8 	bl	8000fc0 <ws2812_set_colors>
  HAL_Delay(2000); // 500 ms delay[
 8000670:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000674:	f000 fe0a 	bl	800128c <HAL_Delay>
  update_single_led(0,0,64,0);
 8000678:	2300      	movs	r3, #0
 800067a:	2240      	movs	r2, #64	@ 0x40
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f000 fd2a 	bl	80010d8 <update_single_led>
  HAL_Delay(2000); // 500 ms delay[
 8000684:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000688:	f000 fe00 	bl	800128c <HAL_Delay>

  bool ledStatus =false;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(!ledStatus){
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f083 0301 	eor.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <main+0x82>
		  update_single_led(3,64,0,0);
 800069c:	2300      	movs	r3, #0
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 fd18 	bl	80010d8 <update_single_led>
 80006a8:	e005      	b.n	80006b6 <main+0x8e>
	  }else update_single_led(3,0,0,0);
 80006aa:	2300      	movs	r3, #0
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 fd11 	bl	80010d8 <update_single_led>
	  ledStatus = !ledStatus;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	bf14      	ite	ne
 80006bc:	2301      	movne	r3, #1
 80006be:	2300      	moveq	r3, #0
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f000 fdd9 	bl	800128c <HAL_Delay>
	  if(!ledStatus){
 80006da:	e7d9      	b.n	8000690 <main+0x68>
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	08005228 	.word	0x08005228
 80006e4:	20000114 	.word	0x20000114
 80006e8:	20000084 	.word	0x20000084

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 ff02 	bl	8004504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xc8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a26      	ldr	r2, [pc, #152]	@ (80007b4 <SystemClock_Config+0xc8>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <SystemClock_Config+0xc8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <SystemClock_Config+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000760:	2348      	movs	r3, #72	@ 0x48
 8000762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fbd7 	bl	8001f24 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 f9b2 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fe39 	bl	8002414 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a8:	f000 f99c 	bl	8000ae4 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	@ 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2220      	movs	r2, #32
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fe85 	bl	8004504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fa:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <MX_TIM1_Init+0x138>)
 80007fc:	4a3e      	ldr	r2, [pc, #248]	@ (80008f8 <MX_TIM1_Init+0x13c>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000800:	4b3c      	ldr	r3, [pc, #240]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 800080c:	4b39      	ldr	r3, [pc, #228]	@ (80008f4 <MX_TIM1_Init+0x138>)
 800080e:	2259      	movs	r2, #89	@ 0x59
 8000810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b38      	ldr	r3, [pc, #224]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000818:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <MX_TIM1_Init+0x138>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081e:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000824:	4833      	ldr	r0, [pc, #204]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000826:	f001 ffd5 	bl	80027d4 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000830:	f000 f958 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800083e:	4619      	mov	r1, r3
 8000840:	482c      	ldr	r0, [pc, #176]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000842:	f002 fcfb 	bl	800323c <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800084c:	f000 f94a 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000850:	4828      	ldr	r0, [pc, #160]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000852:	f002 f871 	bl	8002938 <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800085c:	f000 f942 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000868:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800086c:	4619      	mov	r1, r3
 800086e:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <MX_TIM1_Init+0x138>)
 8000870:	f003 f986 	bl	8003b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800087a:	f000 f933 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	@ 0x60
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <MX_TIM1_Init+0x138>)
 80008a4:	f002 fc08 	bl	80030b8 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80008ae:	f000 f919 	bl	8000ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <MX_TIM1_Init+0x138>)
 80008d6:	f003 f9c1 	bl	8003c5c <HAL_TIMEx_ConfigBreakDeadTime>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008e0:	f000 f900 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <MX_TIM1_Init+0x138>)
 80008e6:	f000 f99f 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 80008ea:	bf00      	nop
 80008ec:	3758      	adds	r7, #88	@ 0x58
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000084 	.word	0x20000084
 80008f8:	40010000 	.word	0x40010000

080008fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM3_Init+0x94>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_TIM3_Init+0x98>)
 800091c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000920:	2247      	movs	r2, #71	@ 0x47
 8000922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_TIM3_Init+0x94>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM3_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000940:	f001 ff48 	bl	80027d4 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f8cb 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_TIM3_Init+0x94>)
 800095c:	f002 fc6e 	bl	800323c <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f8bd 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000978:	f003 f902 	bl	8003b80 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 f8af 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000cc 	.word	0x200000cc
 8000994:	40000400 	.word	0x40000400

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_USART2_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f003 f9aa 	bl	8003d28 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f883 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000174 	.word	0x20000174
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_DMA_Init+0x3c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <MX_DMA_Init+0x3c>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_DMA_Init+0x3c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2039      	movs	r0, #57	@ 0x39
 8000a14:	f000 fd39 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a18:	2039      	movs	r0, #57	@ 0x39
 8000a1a:	f000 fd52 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_GPIO_Init+0x30>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <MX_GPIO_Init+0x30>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_GPIO_Init+0x30>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12e      	bne.n	8000ad0 <HAL_TIM_PeriodElapsedCallback+0x70>
        // Increment your variable here every 100ms
        millisLed++;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a18      	ldr	r2, [pc, #96]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a7a:	6013      	str	r3, [r2, #0]
        static bool ledBlue = false;
        if(millisLed>= 3){
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d925      	bls.n	8000ad0 <HAL_TIM_PeriodElapsedCallback+0x70>
        	millisLed = 0;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
        	if(!ledBlue){
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x46>
        		update_single_led(2, 0, 0,64);
 8000a98:	2340      	movs	r3, #64	@ 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 fb1a 	bl	80010d8 <update_single_led>
 8000aa4:	e005      	b.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x52>
        	}else update_single_led(2, 0, 0,0);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2002      	movs	r0, #2
 8000aae:	f000 fb13 	bl	80010d8 <update_single_led>
        	ledBlue = !ledBlue;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ace:	701a      	strb	r2, [r3, #0]

        }
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	200001bc 	.word	0x200001bc
 8000ae0:	200001c0 	.word	0x200001c0

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a31      	ldr	r2, [pc, #196]	@ (8000c14 <HAL_TIM_Base_MspInit+0xd4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d140      	bne.n	8000bd4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b30      	ldr	r3, [pc, #192]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b70:	4a2b      	ldr	r2, [pc, #172]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b76:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000b7a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b7e:	2240      	movs	r2, #64	@ 0x40
 8000b80:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b96:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000baa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bae:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000bb6:	4819      	ldr	r0, [pc, #100]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000bb8:	f000 fc9e 	bl	80014f8 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8000bc2:	f7ff ff8f 	bl	8000ae4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bd2:	e01a      	b.n	8000c0a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <HAL_TIM_Base_MspInit+0xe4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d115      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_TIM_Base_MspInit+0xd8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201d      	movs	r0, #29
 8000c00:	f000 fc43 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c04:	201d      	movs	r0, #29
 8000c06:	f000 fc5c 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	20000114 	.word	0x20000114
 8000c20:	40026428 	.word	0x40026428
 8000c24:	40000400 	.word	0x40000400

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11e      	bne.n	8000c88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_TIM_MspPostInit+0x70>)
 8000c84:	f000 ffca 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010000 	.word	0x40010000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d12:	f000 ff83 	bl	8001c1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 fa63 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM3_IRQHandler+0x10>)
 8000d92:	f002 f8a1 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000cc 	.word	0x200000cc

08000da0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA2_Stream1_IRQHandler+0x10>)
 8000da6:	f000 fccf 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000114 	.word	0x20000114

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f003 fb6e 	bl	80045a0 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	200001c4 	.word	0x200001c4
 8000ef8:	200004f8 	.word	0x200004f8

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <HAL_TIM_PWM_PulseFinishedCallback>:
static TIM_HandleTypeDef htim;
static DMA_HandleTypeDef hdma;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
volatile uint8_t ws2812_dma_done = 0;  // Global flag to track DMA completion
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {  // Check if it's TIM3 (or your chosen timer)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);  // Stop PWM after transmission
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 ff09 	bl	8002d4c <HAL_TIM_PWM_Stop_DMA>
        ws2812_dma_done = 1;  // Set a flag to indicate DMA is done
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
    }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	200003a0 	.word	0x200003a0

08000f50 <ws2812_init>:
void ws2812_init(TIM_HandleTypeDef *htim_ptr, DMA_HandleTypeDef *hdma_ptr, uint32_t tim_channel) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
    htim = *htim_ptr;
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <ws2812_init+0x58>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	2348      	movs	r3, #72	@ 0x48
 8000f66:	461a      	mov	r2, r3
 8000f68:	f003 fb47 	bl	80045fa <memcpy>
    hdma = *hdma_ptr;
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <ws2812_init+0x5c>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	2360      	movs	r3, #96	@ 0x60
 8000f76:	461a      	mov	r2, r3
 8000f78:	f003 fb3f 	bl	80045fa <memcpy>

    if(HAL_TIM_PWM_Init(&htim1)!= HAL_OK){
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <ws2812_init+0x60>)
 8000f7e:	f001 fcdb 	bl	8002938 <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <ws2812_init+0x44>
    	Log(&huart2, LOG_LEVEL_ERROR,"HAL_TIM_PWM_Init_FAILED\r\n");
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <ws2812_init+0x64>)
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <ws2812_init+0x68>)
 8000f8e:	f7ff faef 	bl	8000570 <Log>
    }else Log(&huart2, LOG_LEVEL_INFO,"HAL_TIM_PWM_Init_SUCCESS\r\n");
}
 8000f92:	e004      	b.n	8000f9e <ws2812_init+0x4e>
    }else Log(&huart2, LOG_LEVEL_INFO,"HAL_TIM_PWM_Init_SUCCESS\r\n");
 8000f94:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <ws2812_init+0x6c>)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4807      	ldr	r0, [pc, #28]	@ (8000fb8 <ws2812_init+0x68>)
 8000f9a:	f7ff fae9 	bl	8000570 <Log>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002f8 	.word	0x200002f8
 8000fac:	20000340 	.word	0x20000340
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	08005234 	.word	0x08005234
 8000fb8:	20000174 	.word	0x20000174
 8000fbc:	08005250 	.word	0x08005250

08000fc0 <ws2812_set_colors>:



void ws2812_set_colors(TIM_HandleTypeDef *htim_ptr, uint8_t *colors, int num_leds) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
    int bit_index = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int led = 0; led < num_leds; led++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	e03a      	b.n	800104c <ws2812_set_colors+0x8c>
        uint32_t color = (colors[led * 3] << 16) | (colors[led * 3 + 1] << 8) | colors[led * 3 + 2];
 8000fd6:	6a3a      	ldr	r2, [r7, #32]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0419      	lsls	r1, r3, #16
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	4319      	orrs	r1, r3
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	3302      	adds	r3, #2
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	430b      	orrs	r3, r1
 800100e:	617b      	str	r3, [r7, #20]
        for (int i = 23; i >= 0; i--) {
 8001010:	2317      	movs	r3, #23
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	e014      	b.n	8001040 <ws2812_set_colors+0x80>
            ws2812_buffer[bit_index++] = (color & (1 << i)) ? WS2812_T1H_CYCLES : WS2812_T0H_CYCLES;
 8001016:	2201      	movs	r2, #1
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	461a      	mov	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <ws2812_set_colors+0x6c>
 8001028:	213a      	movs	r1, #58	@ 0x3a
 800102a:	e000      	b.n	800102e <ws2812_set_colors+0x6e>
 800102c:	211d      	movs	r1, #29
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	627a      	str	r2, [r7, #36]	@ 0x24
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <ws2812_set_colors+0xfc>)
 8001036:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 23; i >= 0; i--) {
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b01      	subs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dae7      	bge.n	8001016 <ws2812_set_colors+0x56>
    for (int led = 0; led < num_leds; led++) {
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	3301      	adds	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbc0      	blt.n	8000fd6 <ws2812_set_colors+0x16>
        }
    }

    // Adicionar código de reset
    for (int i = 0; i < RESET_SLOTS; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e009      	b.n	800106e <ws2812_set_colors+0xae>
        ws2812_buffer[bit_index++] = 0;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001060:	4a16      	ldr	r2, [pc, #88]	@ (80010bc <ws2812_set_colors+0xfc>)
 8001062:	2100      	movs	r1, #0
 8001064:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_SLOTS; i++) {
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	3301      	adds	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b31      	cmp	r3, #49	@ 0x31
 8001072:	ddf2      	ble.n	800105a <ws2812_set_colors+0x9a>
    }
    htim = *htim_ptr;
 8001074:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <ws2812_set_colors+0x100>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	2348      	movs	r3, #72	@ 0x48
 800107e:	461a      	mov	r2, r3
 8001080:	f003 fabb 	bl	80045fa <memcpy>

    ws2812_dma_done = 0;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <ws2812_set_colors+0x104>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    if (HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)ws2812_buffer, TOTAL_BITS) != HAL_OK) {
 800108a:	2392      	movs	r3, #146	@ 0x92
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <ws2812_set_colors+0xfc>)
 800108e:	2100      	movs	r1, #0
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <ws2812_set_colors+0x108>)
 8001092:	f001 fcab 	bl	80029ec <HAL_TIM_PWM_Start_DMA>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <ws2812_set_colors+0xe8>
        Log(&huart2, LOG_LEVEL_ERROR, "HAL_TIM_PWM_Start_DMA_FAILED\r\n");
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <ws2812_set_colors+0x10c>)
 800109e:	2103      	movs	r1, #3
 80010a0:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <ws2812_set_colors+0x110>)
 80010a2:	f7ff fa65 	bl	8000570 <Log>
    } else {
        Log(&huart2, LOG_LEVEL_INFO, "HAL_TIM_PWM_Start_DMA_SUCCESS\r\n");
    }
}
 80010a6:	e004      	b.n	80010b2 <ws2812_set_colors+0xf2>
        Log(&huart2, LOG_LEVEL_INFO, "HAL_TIM_PWM_Start_DMA_SUCCESS\r\n");
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <ws2812_set_colors+0x114>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <ws2812_set_colors+0x110>)
 80010ae:	f7ff fa5f 	bl	8000570 <Log>
}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	@ 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001c8 	.word	0x200001c8
 80010c0:	200002f8 	.word	0x200002f8
 80010c4:	200003a0 	.word	0x200003a0
 80010c8:	20000084 	.word	0x20000084
 80010cc:	0800526c 	.word	0x0800526c
 80010d0:	20000174 	.word	0x20000174
 80010d4:	0800528c 	.word	0x0800528c

080010d8 <update_single_led>:
void update_single_led(int led_index, uint8_t green, uint8_t red, uint8_t blue) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	70fb      	strb	r3, [r7, #3]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70bb      	strb	r3, [r7, #2]
 80010ee:	4613      	mov	r3, r2
 80010f0:	707b      	strb	r3, [r7, #1]
    if (led_index < 0 || led_index >= NUM_LEDS) return;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db23      	blt.n	8001140 <update_single_led+0x68>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	dc20      	bgt.n	8001140 <update_single_led+0x68>

    // Atualizar a cor do LED específico no array global
    ws2812_colors[led_index * 3] = green;
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	4910      	ldr	r1, [pc, #64]	@ (8001148 <update_single_led+0x70>)
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	54ca      	strb	r2, [r1, r3]
    ws2812_colors[led_index * 3 + 1] = red;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3301      	adds	r3, #1
 8001116:	490c      	ldr	r1, [pc, #48]	@ (8001148 <update_single_led+0x70>)
 8001118:	78ba      	ldrb	r2, [r7, #2]
 800111a:	54ca      	strb	r2, [r1, r3]
    ws2812_colors[led_index * 3 + 2] = blue;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3302      	adds	r3, #2
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <update_single_led+0x70>)
 8001128:	787a      	ldrb	r2, [r7, #1]
 800112a:	54ca      	strb	r2, [r1, r3]

    // Atualizar os LEDs com as novas cores
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <update_single_led+0x74>)
 8001130:	f001 fe0c 	bl	8002d4c <HAL_TIM_PWM_Stop_DMA>
    ws2812_set_colors(&htim, ws2812_colors, NUM_LEDS);
 8001134:	2204      	movs	r2, #4
 8001136:	4904      	ldr	r1, [pc, #16]	@ (8001148 <update_single_led+0x70>)
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <update_single_led+0x78>)
 800113a:	f7ff ff41 	bl	8000fc0 <ws2812_set_colors>
 800113e:	e000      	b.n	8001142 <update_single_led+0x6a>
    if (led_index < 0 || led_index >= NUM_LEDS) return;
 8001140:	bf00      	nop
}
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002ec 	.word	0x200002ec
 800114c:	20000084 	.word	0x20000084
 8001150:	200002f8 	.word	0x200002f8

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800118c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001158:	f7ff fed0 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f003 fa13 	bl	80045ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fa4f 	bl	8000628 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001198:	08005310 	.word	0x08005310
  ldr r2, =_sbss
 800119c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011a0:	200004f4 	.word	0x200004f4

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f94f 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fc88 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f967 	bl	80014de <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f92f 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	200003a4 	.word	0x200003a4

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200003a4 	.word	0x200003a4

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff feb6 	bl	8001274 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e099      	b.n	8001648 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	e00f      	b.n	8001556 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001536:	f7ff fe9d 	bl	8001274 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b05      	cmp	r3, #5
 8001542:	d908      	bls.n	8001556 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e078      	b.n	8001648 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e8      	bne.n	8001536 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <HAL_DMA_Init+0x158>)
 8001570:	4013      	ands	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4313      	orrs	r3, r2
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f023 0307 	bic.w	r3, r3, #7
 80015d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d117      	bne.n	800161a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00e      	beq.n	800161a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fa91 	bl	8001b24 <DMA_CheckFifoParam>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2240      	movs	r2, #64	@ 0x40
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001616:	2301      	movs	r3, #1
 8001618:	e016      	b.n	8001648 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fa48 	bl	8001ab8 <DMA_CalcBaseAndBitshift>
 8001628:	4603      	mov	r3, r0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	223f      	movs	r2, #63	@ 0x3f
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	f010803f 	.word	0xf010803f

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_DMA_Start_IT+0x26>
 8001676:	2302      	movs	r3, #2
 8001678:	e040      	b.n	80016fc <HAL_DMA_Start_IT+0xa8>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d12f      	bne.n	80016ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f9da 	bl	8001a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	223f      	movs	r2, #63	@ 0x3f
 80016ae:	409a      	lsls	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0216 	orr.w	r2, r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0208 	orr.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e005      	b.n	80016fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d004      	beq.n	8001722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00c      	b.n	800173c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b8e      	ldr	r3, [pc, #568]	@ (8001990 <HAL_DMA_IRQHandler+0x248>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a8e      	ldr	r2, [pc, #568]	@ (8001994 <HAL_DMA_IRQHandler+0x24c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808f 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8087 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	223f      	movs	r2, #63	@ 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07e      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e079      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01d      	beq.n	80019aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d031      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02c      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000
 8001994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e01e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d032      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d307      	bcc.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f2      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x2cc>
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
 8001a52:	e000      	b.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b40      	cmp	r3, #64	@ 0x40
 8001a88:	d108      	bne.n	8001a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9a:	e007      	b.n	8001aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b10      	subs	r3, #16
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <DMA_CalcBaseAndBitshift+0x64>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d909      	bls.n	8001afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af8:	e007      	b.n	8001b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	aaaaaaab 	.word	0xaaaaaaab
 8001b20:	080052c4 	.word	0x080052c4

08001b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d856      	bhi.n	8001bf2 <DMA_CheckFifoParam+0xce>
 8001b44:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <DMA_CheckFifoParam+0x28>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b6f 	.word	0x08001b6f
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001bf3 	.word	0x08001bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d046      	beq.n	8001bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6c:	e043      	b.n	8001bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b76:	d140      	bne.n	8001bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e03d      	b.n	8001bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b86:	d121      	bne.n	8001bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d837      	bhi.n	8001bfe <DMA_CheckFifoParam+0xda>
 8001b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b94 <DMA_CheckFifoParam+0x70>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bab 	.word	0x08001bab
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001bbd 	.word	0x08001bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e030      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d025      	beq.n	8001c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bba:	e022      	b.n	8001c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bc4:	d11f      	bne.n	8001c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bca:	e01c      	b.n	8001c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d903      	bls.n	8001bda <DMA_CheckFifoParam+0xb6>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d003      	beq.n	8001be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd8:	e018      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8001bde:	e015      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e00b      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e00a      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e008      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e006      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e004      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e002      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	@ (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e267      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d075      	beq.n	800202e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d00c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4e:	4b85      	ldr	r3, [pc, #532]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d112      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4b82      	ldr	r3, [pc, #520]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f66:	d10b      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	4b7e      	ldr	r3, [pc, #504]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d05b      	beq.n	800202c <HAL_RCC_OscConfig+0x108>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d157      	bne.n	800202c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e242      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f88:	d106      	bne.n	8001f98 <HAL_RCC_OscConfig+0x74>
 8001f8a:	4b76      	ldr	r3, [pc, #472]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a75      	ldr	r2, [pc, #468]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e01d      	b.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001fa2:	4b70      	ldr	r3, [pc, #448]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6f      	ldr	r2, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b6d      	ldr	r3, [pc, #436]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6c      	ldr	r2, [pc, #432]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
 8001fbc:	4b69      	ldr	r3, [pc, #420]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a68      	ldr	r2, [pc, #416]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f94a 	bl	8001274 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f946 	bl	8001274 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e207      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xc0>
 8002002:	e014      	b.n	800202e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f936 	bl	8001274 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f932 	bl	8001274 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1f3      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	4b51      	ldr	r3, [pc, #324]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0xe8>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800203a:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800204e:	2b08      	cmp	r3, #8
 8002050:	d11c      	bne.n	800208c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002052:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x152>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1c7      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4937      	ldr	r1, [pc, #220]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	e03a      	b.n	8002102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_RCC_OscConfig+0x244>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7ff f8eb 	bl	8001274 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff f8e7 	bl	8001274 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e1a8      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4925      	ldr	r1, [pc, #148]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_RCC_OscConfig+0x244>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f8ca 	bl	8001274 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff f8c6 	bl	8001274 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e187      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d036      	beq.n	800217c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_RCC_OscConfig+0x248>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff f8aa 	bl	8001274 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff f8a6 	bl	8001274 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e167      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_RCC_OscConfig+0x240>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x200>
 8002142:	e01b      	b.n	800217c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <HAL_RCC_OscConfig+0x248>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff f893 	bl	8001274 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002150:	e00e      	b.n	8002170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002152:	f7ff f88f 	bl	8001274 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d907      	bls.n	8002170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e150      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
 8002164:	40023800 	.word	0x40023800
 8002168:	42470000 	.word	0x42470000
 800216c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b88      	ldr	r3, [pc, #544]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ea      	bne.n	8002152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8097 	beq.w	80022b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b81      	ldr	r3, [pc, #516]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b7d      	ldr	r3, [pc, #500]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b77      	ldr	r3, [pc, #476]	@ (8002398 <HAL_RCC_OscConfig+0x474>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b74      	ldr	r3, [pc, #464]	@ (8002398 <HAL_RCC_OscConfig+0x474>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a73      	ldr	r2, [pc, #460]	@ (8002398 <HAL_RCC_OscConfig+0x474>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7ff f84f 	bl	8001274 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7ff f84b 	bl	8001274 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e10c      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002398 <HAL_RCC_OscConfig+0x474>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x2ea>
 8002200:	4b64      	ldr	r3, [pc, #400]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002204:	4a63      	ldr	r2, [pc, #396]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	@ 0x70
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x324>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x30c>
 8002216:	4b5f      	ldr	r3, [pc, #380]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	4a5e      	ldr	r2, [pc, #376]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6713      	str	r3, [r2, #112]	@ 0x70
 8002222:	4b5c      	ldr	r3, [pc, #368]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	4a5b      	ldr	r2, [pc, #364]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6713      	str	r3, [r2, #112]	@ 0x70
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0x324>
 8002230:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4a57      	ldr	r2, [pc, #348]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	@ 0x70
 800223c:	4b55      	ldr	r3, [pc, #340]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	4a54      	ldr	r2, [pc, #336]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002242:	f023 0304 	bic.w	r3, r3, #4
 8002246:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d015      	beq.n	800227c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f810 	bl	8001274 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff f80c 	bl	8001274 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0cb      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ee      	beq.n	8002258 <HAL_RCC_OscConfig+0x334>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7fe fffa 	bl	8001274 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7fe fff6 	bl	8001274 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0b5      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229a:	4b3e      	ldr	r3, [pc, #248]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ee      	bne.n	8002284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b39      	ldr	r3, [pc, #228]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	4a38      	ldr	r2, [pc, #224]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80022b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a1 	beq.w	8002404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d05c      	beq.n	8002388 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d141      	bne.n	800235a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b31      	ldr	r3, [pc, #196]	@ (800239c <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe ffca 	bl	8001274 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe ffc6 	bl	8001274 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e087      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	491b      	ldr	r1, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_OscConfig+0x478>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe ff9f 	bl	8001274 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe ff9b 	bl	8001274 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e05c      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x416>
 8002358:	e054      	b.n	8002404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_RCC_OscConfig+0x478>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe ff88 	bl	8001274 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff84 	bl	8001274 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e045      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_OscConfig+0x470>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x444>
 8002386:	e03d      	b.n	8002404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e038      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
 8002394:	40023800 	.word	0x40023800
 8002398:	40007000 	.word	0x40007000
 800239c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_RCC_OscConfig+0x4ec>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d028      	beq.n	8002400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d121      	bne.n	8002400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d11a      	bne.n	8002400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d8:	4293      	cmp	r3, r2
 80023da:	d111      	bne.n	8002400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	3b01      	subs	r3, #1
 80023ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0cc      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b68      	ldr	r3, [pc, #416]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d90c      	bls.n	8002450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b65      	ldr	r3, [pc, #404]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b63      	ldr	r3, [pc, #396]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0b8      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a58      	ldr	r2, [pc, #352]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002480:	4b53      	ldr	r3, [pc, #332]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a52      	ldr	r2, [pc, #328]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800248a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b50      	ldr	r3, [pc, #320]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	494d      	ldr	r1, [pc, #308]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d044      	beq.n	8002534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b47      	ldr	r3, [pc, #284]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d119      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e07f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	4b3f      	ldr	r3, [pc, #252]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e067      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4934      	ldr	r1, [pc, #208]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002504:	f7fe feb6 	bl	8001274 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe feb2 	bl	8001274 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d20c      	bcs.n	800255c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e032      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4916      	ldr	r1, [pc, #88]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	490e      	ldr	r1, [pc, #56]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259a:	f000 f821 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	490a      	ldr	r1, [pc, #40]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	5ccb      	ldrb	r3, [r1, r3]
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fe16 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00
 80025d0:	40023800 	.word	0x40023800
 80025d4:	080052ac 	.word	0x080052ac
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b090      	sub	sp, #64	@ 0x40
 80025e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f8:	4b59      	ldr	r3, [pc, #356]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d00d      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x40>
 8002604:	2b08      	cmp	r3, #8
 8002606:	f200 80a1 	bhi.w	800274c <HAL_RCC_GetSysClockFreq+0x16c>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x34>
 800260e:	2b04      	cmp	r3, #4
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x3a>
 8002612:	e09b      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x184>)
 8002616:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002618:	e09b      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800261a:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x188>)
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800261e:	e098      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002620:	4b4f      	ldr	r3, [pc, #316]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800262a:	4b4d      	ldr	r3, [pc, #308]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d028      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002636:	4b4a      	ldr	r3, [pc, #296]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	099b      	lsrs	r3, r3, #6
 800263c:	2200      	movs	r2, #0
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	627a      	str	r2, [r7, #36]	@ 0x24
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002648:	2100      	movs	r1, #0
 800264a:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x188>)
 800264c:	fb03 f201 	mul.w	r2, r3, r1
 8002650:	2300      	movs	r3, #0
 8002652:	fb00 f303 	mul.w	r3, r0, r3
 8002656:	4413      	add	r3, r2
 8002658:	4a43      	ldr	r2, [pc, #268]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x188>)
 800265a:	fba0 1202 	umull	r1, r2, r0, r2
 800265e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002660:	460a      	mov	r2, r1
 8002662:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002666:	4413      	add	r3, r2
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	2200      	movs	r2, #0
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	61fa      	str	r2, [r7, #28]
 8002672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800267a:	f7fd fe01 	bl	8000280 <__aeabi_uldivmod>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4613      	mov	r3, r2
 8002684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002686:	e053      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b35      	ldr	r3, [pc, #212]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	2200      	movs	r2, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	617a      	str	r2, [r7, #20]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800269a:	f04f 0b00 	mov.w	fp, #0
 800269e:	4652      	mov	r2, sl
 80026a0:	465b      	mov	r3, fp
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0159      	lsls	r1, r3, #5
 80026ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b0:	0150      	lsls	r0, r2, #5
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ebb2 080a 	subs.w	r8, r2, sl
 80026ba:	eb63 090b 	sbc.w	r9, r3, fp
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026d2:	ebb2 0408 	subs.w	r4, r2, r8
 80026d6:	eb63 0509 	sbc.w	r5, r3, r9
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	00eb      	lsls	r3, r5, #3
 80026e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e8:	00e2      	lsls	r2, r4, #3
 80026ea:	4614      	mov	r4, r2
 80026ec:	461d      	mov	r5, r3
 80026ee:	eb14 030a 	adds.w	r3, r4, sl
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	eb45 030b 	adc.w	r3, r5, fp
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002706:	4629      	mov	r1, r5
 8002708:	028b      	lsls	r3, r1, #10
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002710:	4621      	mov	r1, r4
 8002712:	028a      	lsls	r2, r1, #10
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	2200      	movs	r2, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002724:	f7fd fdac 	bl	8000280 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x180>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	3301      	adds	r3, #1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002740:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x184>)
 800274e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002754:	4618      	mov	r0, r3
 8002756:	3740      	adds	r7, #64	@ 0x40
 8002758:	46bd      	mov	sp, r7
 800275a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	00f42400 	.word	0x00f42400
 8002768:	017d7840 	.word	0x017d7840

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff0 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	080052bc 	.word	0x080052bc

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffdc 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0b5b      	lsrs	r3, r3, #13
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	080052bc 	.word	0x080052bc

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe f9a0 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 fedc 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e044      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_Base_Start_IT+0xb0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002928 <HAL_TIM_Base_Start_IT+0xb4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_TIM_Base_Start_IT+0xb8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_TIM_Base_Start_IT+0xbc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <HAL_TIM_Base_Start_IT+0xc0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40014000 	.word	0x40014000

08002938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f839 	bl	80029d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fe2a 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e022      	b.n	8002a5e <HAL_TIM_PWM_Start_DMA+0x72>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d109      	bne.n	8002a32 <HAL_TIM_PWM_Start_DMA+0x46>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	e015      	b.n	8002a5e <HAL_TIM_PWM_Start_DMA+0x72>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d109      	bne.n	8002a4c <HAL_TIM_PWM_Start_DMA+0x60>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e008      	b.n	8002a5e <HAL_TIM_PWM_Start_DMA+0x72>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	e15d      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_TIM_PWM_Start_DMA+0x94>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e022      	b.n	8002ac6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d109      	bne.n	8002a9a <HAL_TIM_PWM_Start_DMA+0xae>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e015      	b.n	8002ac6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d109      	bne.n	8002ab4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e008      	b.n	8002ac6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d024      	beq.n	8002b14 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0xea>
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e123      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start_DMA+0xfe>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae8:	e016      	b.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start_DMA+0x10e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002af8:	e00e      	b.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b08:	e006      	b.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b12:	e001      	b.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e104      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	f200 80ae 	bhi.w	8002c7c <HAL_TIM_PWM_Start_DMA+0x290>
 8002b20:	a201      	add	r2, pc, #4	@ (adr r2, 8002b28 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002c7d 	.word	0x08002c7d
 8002b30:	08002c7d 	.word	0x08002c7d
 8002b34:	08002c7d 	.word	0x08002c7d
 8002b38:	08002ba5 	.word	0x08002ba5
 8002b3c:	08002c7d 	.word	0x08002c7d
 8002b40:	08002c7d 	.word	0x08002c7d
 8002b44:	08002c7d 	.word	0x08002c7d
 8002b48:	08002bed 	.word	0x08002bed
 8002b4c:	08002c7d 	.word	0x08002c7d
 8002b50:	08002c7d 	.word	0x08002c7d
 8002b54:	08002c7d 	.word	0x08002c7d
 8002b58:	08002c35 	.word	0x08002c35
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	4a72      	ldr	r2, [pc, #456]	@ (8002d2c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002b62:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	4a71      	ldr	r2, [pc, #452]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	4a70      	ldr	r2, [pc, #448]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002b72:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3334      	adds	r3, #52	@ 0x34
 8002b80:	461a      	mov	r2, r3
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	f7fe fd66 	bl	8001654 <HAL_DMA_Start_IT>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0c7      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba0:	60da      	str	r2, [r3, #12]
      break;
 8002ba2:	e06e      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	4a60      	ldr	r2, [pc, #384]	@ (8002d2c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002baa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	4a5f      	ldr	r2, [pc, #380]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002bba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3338      	adds	r3, #56	@ 0x38
 8002bc8:	461a      	mov	r2, r3
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	f7fe fd42 	bl	8001654 <HAL_DMA_Start_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0a3      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002be8:	60da      	str	r2, [r3, #12]
      break;
 8002bea:	e04a      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d2c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	333c      	adds	r3, #60	@ 0x3c
 8002c10:	461a      	mov	r2, r3
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	f7fe fd1e 	bl	8001654 <HAL_DMA_Start_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c30:	60da      	str	r2, [r3, #12]
      break;
 8002c32:	e026      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	4a3c      	ldr	r2, [pc, #240]	@ (8002d2c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	4a3b      	ldr	r2, [pc, #236]	@ (8002d30 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	4a3a      	ldr	r2, [pc, #232]	@ (8002d34 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3340      	adds	r3, #64	@ 0x40
 8002c58:	461a      	mov	r2, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	f7fe fcfa 	bl	8001654 <HAL_DMA_Start_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e05b      	b.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c78:	60da      	str	r2, [r3, #12]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d14b      	bne.n	8002d20 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 ff4f 	bl	8003b34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a20      	ldr	r2, [pc, #128]	@ (8002d38 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_TIM_PWM_Start_DMA+0x300>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc2:	d013      	beq.n	8002cec <HAL_TIM_PWM_Start_DMA+0x300>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <HAL_TIM_PWM_Start_DMA+0x350>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_PWM_Start_DMA+0x300>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d40 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_PWM_Start_DMA+0x300>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_PWM_Start_DMA+0x300>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	080034c1 	.word	0x080034c1
 8002d30:	08003569 	.word	0x08003569
 8002d34:	0800342f 	.word	0x0800342f
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40014000 	.word	0x40014000

08002d4c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d855      	bhi.n	8002e0c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002d60:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002e0d 	.word	0x08002e0d
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e0d 	.word	0x08002e0d
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002e0d 	.word	0x08002e0d
 8002d80:	08002e0d 	.word	0x08002e0d
 8002d84:	08002e0d 	.word	0x08002e0d
 8002d88:	08002dd5 	.word	0x08002dd5
 8002d8c:	08002e0d 	.word	0x08002e0d
 8002d90:	08002e0d 	.word	0x08002e0d
 8002d94:	08002e0d 	.word	0x08002e0d
 8002d98:	08002df1 	.word	0x08002df1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002daa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fca7 	bl	8001704 <HAL_DMA_Abort_IT>
      break;
 8002db6:	e02c      	b.n	8002e12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fc99 	bl	8001704 <HAL_DMA_Abort_IT>
      break;
 8002dd2:	e01e      	b.n	8002e12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fc8b 	bl	8001704 <HAL_DMA_Abort_IT>
      break;
 8002dee:	e010      	b.n	8002e12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fc7d 	bl	8001704 <HAL_DMA_Abort_IT>
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d157      	bne.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fe87 	bl	8003b34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d117      	bne.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e9e:	e013      	b.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d104      	bne.n	8002eb0 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eae:	e00b      	b.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d104      	bne.n	8002ec0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ebe:	e003      	b.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000

08002ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa5b 	bl	80033de <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa4d 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fff5 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d020      	beq.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0204 	mvn.w	r2, #4
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa35 	bl	80033de <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa27 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fd ffcf 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0208 	mvn.w	r2, #8
 8002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa0f 	bl	80033de <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fa01 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fd ffa9 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d020      	beq.n	8003020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f9e9 	bl	80033de <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f9db 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fd ff83 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0201 	mvn.w	r2, #1
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fd0e 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fe56 	bl	8003d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9bd 	bl	8003406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0220 	mvn.w	r2, #32
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fe28 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0ae      	b.n	8003234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	f200 809f 	bhi.w	8003224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030e6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003225 	.word	0x08003225
 80030f4:	08003225 	.word	0x08003225
 80030f8:	08003225 	.word	0x08003225
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003225 	.word	0x08003225
 8003104:	08003225 	.word	0x08003225
 8003108:	08003225 	.word	0x08003225
 800310c:	080031a3 	.word	0x080031a3
 8003110:	08003225 	.word	0x08003225
 8003114:	08003225 	.word	0x08003225
 8003118:	08003225 	.word	0x08003225
 800311c:	080031e3 	.word	0x080031e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fade 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
      break;
 800315e:	e064      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fb24 	bl	80037b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
      break;
 80031a0:	e043      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fb6f 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
      break;
 80031e0:	e023      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fbb9 	bl	8003960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e002      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e0b4      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x186>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003290:	d03e      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xd4>
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003296:	f200 8087 	bhi.w	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329e:	f000 8086 	beq.w	80033ae <HAL_TIM_ConfigClockSource+0x172>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a6:	d87f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b70      	cmp	r3, #112	@ 0x70
 80032aa:	d01a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xa6>
 80032ac:	2b70      	cmp	r3, #112	@ 0x70
 80032ae:	d87b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b60      	cmp	r3, #96	@ 0x60
 80032b2:	d050      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x11a>
 80032b4:	2b60      	cmp	r3, #96	@ 0x60
 80032b6:	d877      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b50      	cmp	r3, #80	@ 0x50
 80032ba:	d03c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xfa>
 80032bc:	2b50      	cmp	r3, #80	@ 0x50
 80032be:	d873      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d058      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x13a>
 80032c4:	2b40      	cmp	r3, #64	@ 0x40
 80032c6:	d86f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b30      	cmp	r3, #48	@ 0x30
 80032ca:	d064      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032cc:	2b30      	cmp	r3, #48	@ 0x30
 80032ce:	d86b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d060      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d867      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05c      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d05a      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f2:	f000 fbff 	bl	8003af4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
      break;
 800330e:	e04f      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	f000 fbe8 	bl	8003af4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003332:	609a      	str	r2, [r3, #8]
      break;
 8003334:	e03c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	461a      	mov	r2, r3
 8003344:	f000 fb5c 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2150      	movs	r1, #80	@ 0x50
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fbb5 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003354:	e02c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003362:	461a      	mov	r2, r3
 8003364:	f000 fb7b 	bl	8003a5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2160      	movs	r1, #96	@ 0x60
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fba5 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003374:	e01c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	461a      	mov	r2, r3
 8003384:	f000 fb3c 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2140      	movs	r1, #64	@ 0x40
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fb95 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003394:	e00c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	f000 fb8c 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80033a6:	e003      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d107      	bne.n	8003456 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003454:	e02a      	b.n	80034ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2202      	movs	r2, #2
 8003464:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346e:	e01d      	b.n	80034ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d107      	bne.n	800348a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2204      	movs	r2, #4
 800347e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003488:	e010      	b.n	80034ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2208      	movs	r2, #8
 8003498:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a2:	e003      	b.n	80034ac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ffb4 	bl	800341a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d10b      	bne.n	80034f0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d136      	bne.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ee:	e031      	b.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10b      	bne.n	8003512 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2202      	movs	r2, #2
 80034fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d125      	bne.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003510:	e020      	b.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d10b      	bne.n	8003534 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2204      	movs	r2, #4
 8003520:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d114      	bne.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003532:	e00f      	b.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d10a      	bne.n	8003554 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7fd fce3 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d103      	bne.n	8003588 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	771a      	strb	r2, [r3, #28]
 8003586:	e019      	b.n	80035bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d103      	bne.n	800359a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2202      	movs	r2, #2
 8003596:	771a      	strb	r2, [r3, #28]
 8003598:	e010      	b.n	80035bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2204      	movs	r2, #4
 80035a8:	771a      	strb	r2, [r3, #28]
 80035aa:	e007      	b.n	80035bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d102      	bne.n	80035bc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2208      	movs	r2, #8
 80035ba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff18 	bl	80033f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00f      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <TIM_Base_SetConfig+0x100>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a36      	ldr	r2, [pc, #216]	@ (80036d4 <TIM_Base_SetConfig+0x104>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a35      	ldr	r2, [pc, #212]	@ (80036d8 <TIM_Base_SetConfig+0x108>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	@ (80036d0 <TIM_Base_SetConfig+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <TIM_Base_SetConfig+0x104>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	@ (80036d8 <TIM_Base_SetConfig+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a25      	ldr	r2, [pc, #148]	@ (80036dc <TIM_Base_SetConfig+0x10c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <TIM_Base_SetConfig+0x110>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <TIM_Base_SetConfig+0x114>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
  }
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0201 	bic.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0302 	bic.w	r3, r3, #2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10c      	bne.n	800375e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0308 	bic.w	r3, r3, #8
 800374a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40010000 	.word	0x40010000

080037b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0210 	bic.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <TIM_OC2_SetConfig+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <TIM_OC2_SetConfig+0xd4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d113      	bne.n	8003860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800383e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40010000 	.word	0x40010000

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d113      	bne.n	8003936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40010000 	.word	0x40010000

08003960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <TIM_OC4_SetConfig+0x9c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d109      	bne.n	80039d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000

08003a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 030a 	bic.w	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b087      	sub	sp, #28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f023 0210 	bic.w	r2, r3, #16
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	031b      	lsls	r3, r3, #12
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2201      	movs	r2, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e050      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be4:	d013      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000

08003c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e03d      	b.n	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc ffa4 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f82b 	bl	8003dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b0c0      	sub	sp, #256	@ 0x100
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	68d9      	ldr	r1, [r3, #12]
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	ea40 0301 	orr.w	r3, r0, r1
 8003df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e20:	f021 010c 	bic.w	r1, r1, #12
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	6999      	ldr	r1, [r3, #24]
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	ea40 0301 	orr.w	r3, r0, r1
 8003e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d005      	beq.n	8003e68 <UART_SetConfig+0xa0>
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b8d      	ldr	r3, [pc, #564]	@ (8004098 <UART_SetConfig+0x2d0>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d104      	bne.n	8003e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe fca0 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8003e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e70:	e003      	b.n	8003e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e72:	f7fe fc87 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e84:	f040 810c 	bne.w	80040a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	1891      	adds	r1, r2, r2
 8003ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ea2:	415b      	adcs	r3, r3
 8003ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eaa:	4621      	mov	r1, r4
 8003eac:	eb12 0801 	adds.w	r8, r2, r1
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb43 0901 	adc.w	r9, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eca:	4690      	mov	r8, r2
 8003ecc:	4699      	mov	r9, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb18 0303 	adds.w	r3, r8, r3
 8003ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ed8:	462b      	mov	r3, r5
 8003eda:	eb49 0303 	adc.w	r3, r9, r3
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	18db      	adds	r3, r3, r3
 8003efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efc:	4613      	mov	r3, r2
 8003efe:	eb42 0303 	adc.w	r3, r2, r3
 8003f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f0c:	f7fc f9b8 	bl	8000280 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4b61      	ldr	r3, [pc, #388]	@ (800409c <UART_SetConfig+0x2d4>)
 8003f16:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	011c      	lsls	r4, r3, #4
 8003f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	1891      	adds	r1, r2, r2
 8003f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f40:	4641      	mov	r1, r8
 8003f42:	eb12 0a01 	adds.w	sl, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb43 0b01 	adc.w	fp, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f60:	4692      	mov	sl, r2
 8003f62:	469b      	mov	fp, r3
 8003f64:	4643      	mov	r3, r8
 8003f66:	eb1a 0303 	adds.w	r3, sl, r3
 8003f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	eb4b 0303 	adc.w	r3, fp, r3
 8003f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	18db      	adds	r3, r3, r3
 8003f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f92:	4613      	mov	r3, r2
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fa2:	f7fc f96d 	bl	8000280 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <UART_SetConfig+0x2d4>)
 8003fae:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2264      	movs	r2, #100	@ 0x64
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	1acb      	subs	r3, r1, r3
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fc2:	4b36      	ldr	r3, [pc, #216]	@ (800409c <UART_SetConfig+0x2d4>)
 8003fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fd0:	441c      	add	r4, r3
 8003fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	1891      	adds	r1, r2, r2
 8003fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fec:	415b      	adcs	r3, r3
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	1851      	adds	r1, r2, r1
 8003ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	414b      	adcs	r3, r1
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800400c:	4659      	mov	r1, fp
 800400e:	00cb      	lsls	r3, r1, #3
 8004010:	4651      	mov	r1, sl
 8004012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004016:	4651      	mov	r1, sl
 8004018:	00ca      	lsls	r2, r1, #3
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	4603      	mov	r3, r0
 8004020:	4642      	mov	r2, r8
 8004022:	189b      	adds	r3, r3, r2
 8004024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004028:	464b      	mov	r3, r9
 800402a:	460a      	mov	r2, r1
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004048:	460b      	mov	r3, r1
 800404a:	18db      	adds	r3, r3, r3
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800404e:	4613      	mov	r3, r2
 8004050:	eb42 0303 	adc.w	r3, r2, r3
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800405a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800405e:	f7fc f90f 	bl	8000280 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <UART_SetConfig+0x2d4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	@ 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	3332      	adds	r3, #50	@ 0x32
 800407a:	4a08      	ldr	r2, [pc, #32]	@ (800409c <UART_SetConfig+0x2d4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 0207 	and.w	r2, r3, #7
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4422      	add	r2, r4
 800408e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004090:	e106      	b.n	80042a0 <UART_SetConfig+0x4d8>
 8004092:	bf00      	nop
 8004094:	40011000 	.word	0x40011000
 8004098:	40011400 	.word	0x40011400
 800409c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040b2:	4642      	mov	r2, r8
 80040b4:	464b      	mov	r3, r9
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	6239      	str	r1, [r7, #32]
 80040ba:	415b      	adcs	r3, r3
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c2:	4641      	mov	r1, r8
 80040c4:	1854      	adds	r4, r2, r1
 80040c6:	4649      	mov	r1, r9
 80040c8:	eb43 0501 	adc.w	r5, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	18e3      	adds	r3, r4, r3
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040e8:	464b      	mov	r3, r9
 80040ea:	eb45 0303 	adc.w	r3, r5, r3
 80040ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800410e:	4629      	mov	r1, r5
 8004110:	008b      	lsls	r3, r1, #2
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004118:	4621      	mov	r1, r4
 800411a:	008a      	lsls	r2, r1, #2
 800411c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004120:	f7fc f8ae 	bl	8000280 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4b60      	ldr	r3, [pc, #384]	@ (80042ac <UART_SetConfig+0x4e4>)
 800412a:	fba3 2302 	umull	r2, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	011c      	lsls	r4, r3, #4
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800413c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	1891      	adds	r1, r2, r2
 800414a:	61b9      	str	r1, [r7, #24]
 800414c:	415b      	adcs	r3, r3
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004154:	4641      	mov	r1, r8
 8004156:	1851      	adds	r1, r2, r1
 8004158:	6139      	str	r1, [r7, #16]
 800415a:	4649      	mov	r1, r9
 800415c:	414b      	adcs	r3, r1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800416c:	4659      	mov	r1, fp
 800416e:	00cb      	lsls	r3, r1, #3
 8004170:	4651      	mov	r1, sl
 8004172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004176:	4651      	mov	r1, sl
 8004178:	00ca      	lsls	r2, r1, #3
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	4603      	mov	r3, r0
 8004180:	4642      	mov	r2, r8
 8004182:	189b      	adds	r3, r3, r2
 8004184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004188:	464b      	mov	r3, r9
 800418a:	460a      	mov	r2, r1
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800419e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041ac:	4649      	mov	r1, r9
 80041ae:	008b      	lsls	r3, r1, #2
 80041b0:	4641      	mov	r1, r8
 80041b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b6:	4641      	mov	r1, r8
 80041b8:	008a      	lsls	r2, r1, #2
 80041ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041be:	f7fc f85f 	bl	8000280 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	4b38      	ldr	r3, [pc, #224]	@ (80042ac <UART_SetConfig+0x4e4>)
 80041ca:	fba3 2301 	umull	r2, r3, r3, r1
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	1acb      	subs	r3, r1, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	@ 0x32
 80041dc:	4a33      	ldr	r2, [pc, #204]	@ (80042ac <UART_SetConfig+0x4e4>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e8:	441c      	add	r4, r3
 80041ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ee:	2200      	movs	r2, #0
 80041f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	415b      	adcs	r3, r3
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004208:	4641      	mov	r1, r8
 800420a:	1851      	adds	r1, r2, r1
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	4649      	mov	r1, r9
 8004210:	414b      	adcs	r3, r1
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004220:	4659      	mov	r1, fp
 8004222:	00cb      	lsls	r3, r1, #3
 8004224:	4651      	mov	r1, sl
 8004226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422a:	4651      	mov	r1, sl
 800422c:	00ca      	lsls	r2, r1, #3
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	4603      	mov	r3, r0
 8004234:	4642      	mov	r2, r8
 8004236:	189b      	adds	r3, r3, r2
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423a:	464b      	mov	r3, r9
 800423c:	460a      	mov	r2, r1
 800423e:	eb42 0303 	adc.w	r3, r2, r3
 8004242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	663b      	str	r3, [r7, #96]	@ 0x60
 800424e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800425c:	4649      	mov	r1, r9
 800425e:	008b      	lsls	r3, r1, #2
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004266:	4641      	mov	r1, r8
 8004268:	008a      	lsls	r2, r1, #2
 800426a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800426e:	f7fc f807 	bl	8000280 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <UART_SetConfig+0x4e4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	@ 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	@ 0x32
 800428a:	4a08      	ldr	r2, [pc, #32]	@ (80042ac <UART_SetConfig+0x4e4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4422      	add	r2, r4
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ac:	51eb851f 	.word	0x51eb851f

080042b0 <std>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	4604      	mov	r4, r0
 80042b6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042be:	6083      	str	r3, [r0, #8]
 80042c0:	8181      	strh	r1, [r0, #12]
 80042c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c4:	81c2      	strh	r2, [r0, #14]
 80042c6:	6183      	str	r3, [r0, #24]
 80042c8:	4619      	mov	r1, r3
 80042ca:	2208      	movs	r2, #8
 80042cc:	305c      	adds	r0, #92	@ 0x5c
 80042ce:	f000 f919 	bl	8004504 <memset>
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <std+0x58>)
 80042d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <std+0x5c>)
 80042d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <std+0x60>)
 80042dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x64>)
 80042e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x68>)
 80042e4:	6224      	str	r4, [r4, #32]
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d006      	beq.n	80042f8 <std+0x48>
 80042ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042ee:	4294      	cmp	r4, r2
 80042f0:	d002      	beq.n	80042f8 <std+0x48>
 80042f2:	33d0      	adds	r3, #208	@ 0xd0
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d105      	bne.n	8004304 <std+0x54>
 80042f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004300:	f000 b978 	b.w	80045f4 <__retarget_lock_init_recursive>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	08004469 	.word	0x08004469
 800430c:	0800448b 	.word	0x0800448b
 8004310:	080044c3 	.word	0x080044c3
 8004314:	080044e7 	.word	0x080044e7
 8004318:	200003a8 	.word	0x200003a8

0800431c <stdio_exit_handler>:
 800431c:	4a02      	ldr	r2, [pc, #8]	@ (8004328 <stdio_exit_handler+0xc>)
 800431e:	4903      	ldr	r1, [pc, #12]	@ (800432c <stdio_exit_handler+0x10>)
 8004320:	4803      	ldr	r0, [pc, #12]	@ (8004330 <stdio_exit_handler+0x14>)
 8004322:	f000 b869 	b.w	80043f8 <_fwalk_sglue>
 8004326:	bf00      	nop
 8004328:	2000000c 	.word	0x2000000c
 800432c:	08004eb1 	.word	0x08004eb1
 8004330:	2000001c 	.word	0x2000001c

08004334 <cleanup_stdio>:
 8004334:	6841      	ldr	r1, [r0, #4]
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <cleanup_stdio+0x34>)
 8004338:	4299      	cmp	r1, r3
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	d001      	beq.n	8004344 <cleanup_stdio+0x10>
 8004340:	f000 fdb6 	bl	8004eb0 <_fflush_r>
 8004344:	68a1      	ldr	r1, [r4, #8]
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <cleanup_stdio+0x38>)
 8004348:	4299      	cmp	r1, r3
 800434a:	d002      	beq.n	8004352 <cleanup_stdio+0x1e>
 800434c:	4620      	mov	r0, r4
 800434e:	f000 fdaf 	bl	8004eb0 <_fflush_r>
 8004352:	68e1      	ldr	r1, [r4, #12]
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <cleanup_stdio+0x3c>)
 8004356:	4299      	cmp	r1, r3
 8004358:	d004      	beq.n	8004364 <cleanup_stdio+0x30>
 800435a:	4620      	mov	r0, r4
 800435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004360:	f000 bda6 	b.w	8004eb0 <_fflush_r>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	200003a8 	.word	0x200003a8
 800436c:	20000410 	.word	0x20000410
 8004370:	20000478 	.word	0x20000478

08004374 <global_stdio_init.part.0>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <global_stdio_init.part.0+0x30>)
 8004378:	4c0b      	ldr	r4, [pc, #44]	@ (80043a8 <global_stdio_init.part.0+0x34>)
 800437a:	4a0c      	ldr	r2, [pc, #48]	@ (80043ac <global_stdio_init.part.0+0x38>)
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4620      	mov	r0, r4
 8004380:	2200      	movs	r2, #0
 8004382:	2104      	movs	r1, #4
 8004384:	f7ff ff94 	bl	80042b0 <std>
 8004388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800438c:	2201      	movs	r2, #1
 800438e:	2109      	movs	r1, #9
 8004390:	f7ff ff8e 	bl	80042b0 <std>
 8004394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004398:	2202      	movs	r2, #2
 800439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439e:	2112      	movs	r1, #18
 80043a0:	f7ff bf86 	b.w	80042b0 <std>
 80043a4:	200004e0 	.word	0x200004e0
 80043a8:	200003a8 	.word	0x200003a8
 80043ac:	0800431d 	.word	0x0800431d

080043b0 <__sfp_lock_acquire>:
 80043b0:	4801      	ldr	r0, [pc, #4]	@ (80043b8 <__sfp_lock_acquire+0x8>)
 80043b2:	f000 b920 	b.w	80045f6 <__retarget_lock_acquire_recursive>
 80043b6:	bf00      	nop
 80043b8:	200004e9 	.word	0x200004e9

080043bc <__sfp_lock_release>:
 80043bc:	4801      	ldr	r0, [pc, #4]	@ (80043c4 <__sfp_lock_release+0x8>)
 80043be:	f000 b91b 	b.w	80045f8 <__retarget_lock_release_recursive>
 80043c2:	bf00      	nop
 80043c4:	200004e9 	.word	0x200004e9

080043c8 <__sinit>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	f7ff fff0 	bl	80043b0 <__sfp_lock_acquire>
 80043d0:	6a23      	ldr	r3, [r4, #32]
 80043d2:	b11b      	cbz	r3, 80043dc <__sinit+0x14>
 80043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d8:	f7ff bff0 	b.w	80043bc <__sfp_lock_release>
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <__sinit+0x28>)
 80043de:	6223      	str	r3, [r4, #32]
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__sinit+0x2c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f5      	bne.n	80043d4 <__sinit+0xc>
 80043e8:	f7ff ffc4 	bl	8004374 <global_stdio_init.part.0>
 80043ec:	e7f2      	b.n	80043d4 <__sinit+0xc>
 80043ee:	bf00      	nop
 80043f0:	08004335 	.word	0x08004335
 80043f4:	200004e0 	.word	0x200004e0

080043f8 <_fwalk_sglue>:
 80043f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043fc:	4607      	mov	r7, r0
 80043fe:	4688      	mov	r8, r1
 8004400:	4614      	mov	r4, r2
 8004402:	2600      	movs	r6, #0
 8004404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004408:	f1b9 0901 	subs.w	r9, r9, #1
 800440c:	d505      	bpl.n	800441a <_fwalk_sglue+0x22>
 800440e:	6824      	ldr	r4, [r4, #0]
 8004410:	2c00      	cmp	r4, #0
 8004412:	d1f7      	bne.n	8004404 <_fwalk_sglue+0xc>
 8004414:	4630      	mov	r0, r6
 8004416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d907      	bls.n	8004430 <_fwalk_sglue+0x38>
 8004420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004424:	3301      	adds	r3, #1
 8004426:	d003      	beq.n	8004430 <_fwalk_sglue+0x38>
 8004428:	4629      	mov	r1, r5
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	4306      	orrs	r6, r0
 8004430:	3568      	adds	r5, #104	@ 0x68
 8004432:	e7e9      	b.n	8004408 <_fwalk_sglue+0x10>

08004434 <iprintf>:
 8004434:	b40f      	push	{r0, r1, r2, r3}
 8004436:	b507      	push	{r0, r1, r2, lr}
 8004438:	4906      	ldr	r1, [pc, #24]	@ (8004454 <iprintf+0x20>)
 800443a:	ab04      	add	r3, sp, #16
 800443c:	6808      	ldr	r0, [r1, #0]
 800443e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004442:	6881      	ldr	r1, [r0, #8]
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	f000 fa09 	bl	800485c <_vfiprintf_r>
 800444a:	b003      	add	sp, #12
 800444c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004450:	b004      	add	sp, #16
 8004452:	4770      	bx	lr
 8004454:	20000018 	.word	0x20000018

08004458 <putchar>:
 8004458:	4b02      	ldr	r3, [pc, #8]	@ (8004464 <putchar+0xc>)
 800445a:	4601      	mov	r1, r0
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	6882      	ldr	r2, [r0, #8]
 8004460:	f000 bd4e 	b.w	8004f00 <_putc_r>
 8004464:	20000018 	.word	0x20000018

08004468 <__sread>:
 8004468:	b510      	push	{r4, lr}
 800446a:	460c      	mov	r4, r1
 800446c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004470:	f000 f872 	bl	8004558 <_read_r>
 8004474:	2800      	cmp	r0, #0
 8004476:	bfab      	itete	ge
 8004478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800447a:	89a3      	ldrhlt	r3, [r4, #12]
 800447c:	181b      	addge	r3, r3, r0
 800447e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004482:	bfac      	ite	ge
 8004484:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004486:	81a3      	strhlt	r3, [r4, #12]
 8004488:	bd10      	pop	{r4, pc}

0800448a <__swrite>:
 800448a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448e:	461f      	mov	r7, r3
 8004490:	898b      	ldrh	r3, [r1, #12]
 8004492:	05db      	lsls	r3, r3, #23
 8004494:	4605      	mov	r5, r0
 8004496:	460c      	mov	r4, r1
 8004498:	4616      	mov	r6, r2
 800449a:	d505      	bpl.n	80044a8 <__swrite+0x1e>
 800449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a0:	2302      	movs	r3, #2
 80044a2:	2200      	movs	r2, #0
 80044a4:	f000 f846 	bl	8004534 <_lseek_r>
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b2:	81a3      	strh	r3, [r4, #12]
 80044b4:	4632      	mov	r2, r6
 80044b6:	463b      	mov	r3, r7
 80044b8:	4628      	mov	r0, r5
 80044ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	f000 b85d 	b.w	800457c <_write_r>

080044c2 <__sseek>:
 80044c2:	b510      	push	{r4, lr}
 80044c4:	460c      	mov	r4, r1
 80044c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ca:	f000 f833 	bl	8004534 <_lseek_r>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	bf15      	itete	ne
 80044d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044de:	81a3      	strheq	r3, [r4, #12]
 80044e0:	bf18      	it	ne
 80044e2:	81a3      	strhne	r3, [r4, #12]
 80044e4:	bd10      	pop	{r4, pc}

080044e6 <__sclose>:
 80044e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ea:	f000 b813 	b.w	8004514 <_close_r>
	...

080044f0 <viprintf>:
 80044f0:	460b      	mov	r3, r1
 80044f2:	4903      	ldr	r1, [pc, #12]	@ (8004500 <viprintf+0x10>)
 80044f4:	4602      	mov	r2, r0
 80044f6:	6808      	ldr	r0, [r1, #0]
 80044f8:	6881      	ldr	r1, [r0, #8]
 80044fa:	f000 b9af 	b.w	800485c <_vfiprintf_r>
 80044fe:	bf00      	nop
 8004500:	20000018 	.word	0x20000018

08004504 <memset>:
 8004504:	4402      	add	r2, r0
 8004506:	4603      	mov	r3, r0
 8004508:	4293      	cmp	r3, r2
 800450a:	d100      	bne.n	800450e <memset+0xa>
 800450c:	4770      	bx	lr
 800450e:	f803 1b01 	strb.w	r1, [r3], #1
 8004512:	e7f9      	b.n	8004508 <memset+0x4>

08004514 <_close_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d06      	ldr	r5, [pc, #24]	@ (8004530 <_close_r+0x1c>)
 8004518:	2300      	movs	r3, #0
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc fc81 	bl	8000e26 <_close>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_close_r+0x1a>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_close_r+0x1a>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	200004e4 	.word	0x200004e4

08004534 <_lseek_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d07      	ldr	r5, [pc, #28]	@ (8004554 <_lseek_r+0x20>)
 8004538:	4604      	mov	r4, r0
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	2200      	movs	r2, #0
 8004540:	602a      	str	r2, [r5, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f7fc fc96 	bl	8000e74 <_lseek>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_lseek_r+0x1e>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_lseek_r+0x1e>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	200004e4 	.word	0x200004e4

08004558 <_read_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	@ (8004578 <_read_r+0x20>)
 800455c:	4604      	mov	r4, r0
 800455e:	4608      	mov	r0, r1
 8004560:	4611      	mov	r1, r2
 8004562:	2200      	movs	r2, #0
 8004564:	602a      	str	r2, [r5, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f7fc fc24 	bl	8000db4 <_read>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_read_r+0x1e>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_read_r+0x1e>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	200004e4 	.word	0x200004e4

0800457c <_write_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	@ (800459c <_write_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fc fc2f 	bl	8000dee <_write>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_write_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_write_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	200004e4 	.word	0x200004e4

080045a0 <__errno>:
 80045a0:	4b01      	ldr	r3, [pc, #4]	@ (80045a8 <__errno+0x8>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000018 	.word	0x20000018

080045ac <__libc_init_array>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	4d0d      	ldr	r5, [pc, #52]	@ (80045e4 <__libc_init_array+0x38>)
 80045b0:	4c0d      	ldr	r4, [pc, #52]	@ (80045e8 <__libc_init_array+0x3c>)
 80045b2:	1b64      	subs	r4, r4, r5
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	2600      	movs	r6, #0
 80045b8:	42a6      	cmp	r6, r4
 80045ba:	d109      	bne.n	80045d0 <__libc_init_array+0x24>
 80045bc:	4d0b      	ldr	r5, [pc, #44]	@ (80045ec <__libc_init_array+0x40>)
 80045be:	4c0c      	ldr	r4, [pc, #48]	@ (80045f0 <__libc_init_array+0x44>)
 80045c0:	f000 fdfa 	bl	80051b8 <_init>
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	2600      	movs	r6, #0
 80045ca:	42a6      	cmp	r6, r4
 80045cc:	d105      	bne.n	80045da <__libc_init_array+0x2e>
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d4:	4798      	blx	r3
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7ee      	b.n	80045b8 <__libc_init_array+0xc>
 80045da:	f855 3b04 	ldr.w	r3, [r5], #4
 80045de:	4798      	blx	r3
 80045e0:	3601      	adds	r6, #1
 80045e2:	e7f2      	b.n	80045ca <__libc_init_array+0x1e>
 80045e4:	08005308 	.word	0x08005308
 80045e8:	08005308 	.word	0x08005308
 80045ec:	08005308 	.word	0x08005308
 80045f0:	0800530c 	.word	0x0800530c

080045f4 <__retarget_lock_init_recursive>:
 80045f4:	4770      	bx	lr

080045f6 <__retarget_lock_acquire_recursive>:
 80045f6:	4770      	bx	lr

080045f8 <__retarget_lock_release_recursive>:
 80045f8:	4770      	bx	lr

080045fa <memcpy>:
 80045fa:	440a      	add	r2, r1
 80045fc:	4291      	cmp	r1, r2
 80045fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8004602:	d100      	bne.n	8004606 <memcpy+0xc>
 8004604:	4770      	bx	lr
 8004606:	b510      	push	{r4, lr}
 8004608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004610:	4291      	cmp	r1, r2
 8004612:	d1f9      	bne.n	8004608 <memcpy+0xe>
 8004614:	bd10      	pop	{r4, pc}
	...

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d041      	beq.n	80046a4 <_free_r+0x8c>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f000 f8e0 	bl	80047f0 <__malloc_lock>
 8004630:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <_free_r+0x90>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	b933      	cbnz	r3, 8004644 <_free_r+0x2c>
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	4628      	mov	r0, r5
 800463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004640:	f000 b8dc 	b.w	80047fc <__malloc_unlock>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x42>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428b      	cmp	r3, r1
 800464e:	bf01      	itttt	eq
 8004650:	6819      	ldreq	r1, [r3, #0]
 8004652:	685b      	ldreq	r3, [r3, #4]
 8004654:	1809      	addeq	r1, r1, r0
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	e7ed      	b.n	8004636 <_free_r+0x1e>
 800465a:	461a      	mov	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b10b      	cbz	r3, 8004664 <_free_r+0x4c>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d9fa      	bls.n	800465a <_free_r+0x42>
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	1850      	adds	r0, r2, r1
 8004668:	42a0      	cmp	r0, r4
 800466a:	d10b      	bne.n	8004684 <_free_r+0x6c>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	4401      	add	r1, r0
 8004670:	1850      	adds	r0, r2, r1
 8004672:	4283      	cmp	r3, r0
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	d1e0      	bne.n	800463a <_free_r+0x22>
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	4408      	add	r0, r1
 8004680:	6010      	str	r0, [r2, #0]
 8004682:	e7da      	b.n	800463a <_free_r+0x22>
 8004684:	d902      	bls.n	800468c <_free_r+0x74>
 8004686:	230c      	movs	r3, #12
 8004688:	602b      	str	r3, [r5, #0]
 800468a:	e7d6      	b.n	800463a <_free_r+0x22>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	1821      	adds	r1, r4, r0
 8004690:	428b      	cmp	r3, r1
 8004692:	bf04      	itt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	bf04      	itt	eq
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	6054      	str	r4, [r2, #4]
 80046a2:	e7ca      	b.n	800463a <_free_r+0x22>
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	200004f0 	.word	0x200004f0

080046ac <sbrk_aligned>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4e0f      	ldr	r6, [pc, #60]	@ (80046ec <sbrk_aligned+0x40>)
 80046b0:	460c      	mov	r4, r1
 80046b2:	6831      	ldr	r1, [r6, #0]
 80046b4:	4605      	mov	r5, r0
 80046b6:	b911      	cbnz	r1, 80046be <sbrk_aligned+0x12>
 80046b8:	f000 fcea 	bl	8005090 <_sbrk_r>
 80046bc:	6030      	str	r0, [r6, #0]
 80046be:	4621      	mov	r1, r4
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 fce5 	bl	8005090 <_sbrk_r>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d103      	bne.n	80046d2 <sbrk_aligned+0x26>
 80046ca:	f04f 34ff 	mov.w	r4, #4294967295
 80046ce:	4620      	mov	r0, r4
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	1cc4      	adds	r4, r0, #3
 80046d4:	f024 0403 	bic.w	r4, r4, #3
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d0f8      	beq.n	80046ce <sbrk_aligned+0x22>
 80046dc:	1a21      	subs	r1, r4, r0
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 fcd6 	bl	8005090 <_sbrk_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1f2      	bne.n	80046ce <sbrk_aligned+0x22>
 80046e8:	e7ef      	b.n	80046ca <sbrk_aligned+0x1e>
 80046ea:	bf00      	nop
 80046ec:	200004ec 	.word	0x200004ec

080046f0 <_malloc_r>:
 80046f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f4:	1ccd      	adds	r5, r1, #3
 80046f6:	f025 0503 	bic.w	r5, r5, #3
 80046fa:	3508      	adds	r5, #8
 80046fc:	2d0c      	cmp	r5, #12
 80046fe:	bf38      	it	cc
 8004700:	250c      	movcc	r5, #12
 8004702:	2d00      	cmp	r5, #0
 8004704:	4606      	mov	r6, r0
 8004706:	db01      	blt.n	800470c <_malloc_r+0x1c>
 8004708:	42a9      	cmp	r1, r5
 800470a:	d904      	bls.n	8004716 <_malloc_r+0x26>
 800470c:	230c      	movs	r3, #12
 800470e:	6033      	str	r3, [r6, #0]
 8004710:	2000      	movs	r0, #0
 8004712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047ec <_malloc_r+0xfc>
 800471a:	f000 f869 	bl	80047f0 <__malloc_lock>
 800471e:	f8d8 3000 	ldr.w	r3, [r8]
 8004722:	461c      	mov	r4, r3
 8004724:	bb44      	cbnz	r4, 8004778 <_malloc_r+0x88>
 8004726:	4629      	mov	r1, r5
 8004728:	4630      	mov	r0, r6
 800472a:	f7ff ffbf 	bl	80046ac <sbrk_aligned>
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	4604      	mov	r4, r0
 8004732:	d158      	bne.n	80047e6 <_malloc_r+0xf6>
 8004734:	f8d8 4000 	ldr.w	r4, [r8]
 8004738:	4627      	mov	r7, r4
 800473a:	2f00      	cmp	r7, #0
 800473c:	d143      	bne.n	80047c6 <_malloc_r+0xd6>
 800473e:	2c00      	cmp	r4, #0
 8004740:	d04b      	beq.n	80047da <_malloc_r+0xea>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	4639      	mov	r1, r7
 8004746:	4630      	mov	r0, r6
 8004748:	eb04 0903 	add.w	r9, r4, r3
 800474c:	f000 fca0 	bl	8005090 <_sbrk_r>
 8004750:	4581      	cmp	r9, r0
 8004752:	d142      	bne.n	80047da <_malloc_r+0xea>
 8004754:	6821      	ldr	r1, [r4, #0]
 8004756:	1a6d      	subs	r5, r5, r1
 8004758:	4629      	mov	r1, r5
 800475a:	4630      	mov	r0, r6
 800475c:	f7ff ffa6 	bl	80046ac <sbrk_aligned>
 8004760:	3001      	adds	r0, #1
 8004762:	d03a      	beq.n	80047da <_malloc_r+0xea>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	442b      	add	r3, r5
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	f8d8 3000 	ldr.w	r3, [r8]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	bb62      	cbnz	r2, 80047cc <_malloc_r+0xdc>
 8004772:	f8c8 7000 	str.w	r7, [r8]
 8004776:	e00f      	b.n	8004798 <_malloc_r+0xa8>
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	1b52      	subs	r2, r2, r5
 800477c:	d420      	bmi.n	80047c0 <_malloc_r+0xd0>
 800477e:	2a0b      	cmp	r2, #11
 8004780:	d917      	bls.n	80047b2 <_malloc_r+0xc2>
 8004782:	1961      	adds	r1, r4, r5
 8004784:	42a3      	cmp	r3, r4
 8004786:	6025      	str	r5, [r4, #0]
 8004788:	bf18      	it	ne
 800478a:	6059      	strne	r1, [r3, #4]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	bf08      	it	eq
 8004790:	f8c8 1000 	streq.w	r1, [r8]
 8004794:	5162      	str	r2, [r4, r5]
 8004796:	604b      	str	r3, [r1, #4]
 8004798:	4630      	mov	r0, r6
 800479a:	f000 f82f 	bl	80047fc <__malloc_unlock>
 800479e:	f104 000b 	add.w	r0, r4, #11
 80047a2:	1d23      	adds	r3, r4, #4
 80047a4:	f020 0007 	bic.w	r0, r0, #7
 80047a8:	1ac2      	subs	r2, r0, r3
 80047aa:	bf1c      	itt	ne
 80047ac:	1a1b      	subne	r3, r3, r0
 80047ae:	50a3      	strne	r3, [r4, r2]
 80047b0:	e7af      	b.n	8004712 <_malloc_r+0x22>
 80047b2:	6862      	ldr	r2, [r4, #4]
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	bf0c      	ite	eq
 80047b8:	f8c8 2000 	streq.w	r2, [r8]
 80047bc:	605a      	strne	r2, [r3, #4]
 80047be:	e7eb      	b.n	8004798 <_malloc_r+0xa8>
 80047c0:	4623      	mov	r3, r4
 80047c2:	6864      	ldr	r4, [r4, #4]
 80047c4:	e7ae      	b.n	8004724 <_malloc_r+0x34>
 80047c6:	463c      	mov	r4, r7
 80047c8:	687f      	ldr	r7, [r7, #4]
 80047ca:	e7b6      	b.n	800473a <_malloc_r+0x4a>
 80047cc:	461a      	mov	r2, r3
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d1fb      	bne.n	80047cc <_malloc_r+0xdc>
 80047d4:	2300      	movs	r3, #0
 80047d6:	6053      	str	r3, [r2, #4]
 80047d8:	e7de      	b.n	8004798 <_malloc_r+0xa8>
 80047da:	230c      	movs	r3, #12
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	4630      	mov	r0, r6
 80047e0:	f000 f80c 	bl	80047fc <__malloc_unlock>
 80047e4:	e794      	b.n	8004710 <_malloc_r+0x20>
 80047e6:	6005      	str	r5, [r0, #0]
 80047e8:	e7d6      	b.n	8004798 <_malloc_r+0xa8>
 80047ea:	bf00      	nop
 80047ec:	200004f0 	.word	0x200004f0

080047f0 <__malloc_lock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	@ (80047f8 <__malloc_lock+0x8>)
 80047f2:	f7ff bf00 	b.w	80045f6 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	200004e8 	.word	0x200004e8

080047fc <__malloc_unlock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	@ (8004804 <__malloc_unlock+0x8>)
 80047fe:	f7ff befb 	b.w	80045f8 <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	200004e8 	.word	0x200004e8

08004808 <__sfputc_r>:
 8004808:	6893      	ldr	r3, [r2, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	b410      	push	{r4}
 8004810:	6093      	str	r3, [r2, #8]
 8004812:	da08      	bge.n	8004826 <__sfputc_r+0x1e>
 8004814:	6994      	ldr	r4, [r2, #24]
 8004816:	42a3      	cmp	r3, r4
 8004818:	db01      	blt.n	800481e <__sfputc_r+0x16>
 800481a:	290a      	cmp	r1, #10
 800481c:	d103      	bne.n	8004826 <__sfputc_r+0x1e>
 800481e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004822:	f000 bba1 	b.w	8004f68 <__swbuf_r>
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	1c58      	adds	r0, r3, #1
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	7019      	strb	r1, [r3, #0]
 800482e:	4608      	mov	r0, r1
 8004830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004834:	4770      	bx	lr

08004836 <__sfputs_r>:
 8004836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004838:	4606      	mov	r6, r0
 800483a:	460f      	mov	r7, r1
 800483c:	4614      	mov	r4, r2
 800483e:	18d5      	adds	r5, r2, r3
 8004840:	42ac      	cmp	r4, r5
 8004842:	d101      	bne.n	8004848 <__sfputs_r+0x12>
 8004844:	2000      	movs	r0, #0
 8004846:	e007      	b.n	8004858 <__sfputs_r+0x22>
 8004848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484c:	463a      	mov	r2, r7
 800484e:	4630      	mov	r0, r6
 8004850:	f7ff ffda 	bl	8004808 <__sfputc_r>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d1f3      	bne.n	8004840 <__sfputs_r+0xa>
 8004858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800485c <_vfiprintf_r>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	460d      	mov	r5, r1
 8004862:	b09d      	sub	sp, #116	@ 0x74
 8004864:	4614      	mov	r4, r2
 8004866:	4698      	mov	r8, r3
 8004868:	4606      	mov	r6, r0
 800486a:	b118      	cbz	r0, 8004874 <_vfiprintf_r+0x18>
 800486c:	6a03      	ldr	r3, [r0, #32]
 800486e:	b90b      	cbnz	r3, 8004874 <_vfiprintf_r+0x18>
 8004870:	f7ff fdaa 	bl	80043c8 <__sinit>
 8004874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004876:	07d9      	lsls	r1, r3, #31
 8004878:	d405      	bmi.n	8004886 <_vfiprintf_r+0x2a>
 800487a:	89ab      	ldrh	r3, [r5, #12]
 800487c:	059a      	lsls	r2, r3, #22
 800487e:	d402      	bmi.n	8004886 <_vfiprintf_r+0x2a>
 8004880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004882:	f7ff feb8 	bl	80045f6 <__retarget_lock_acquire_recursive>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	071b      	lsls	r3, r3, #28
 800488a:	d501      	bpl.n	8004890 <_vfiprintf_r+0x34>
 800488c:	692b      	ldr	r3, [r5, #16]
 800488e:	b99b      	cbnz	r3, 80048b8 <_vfiprintf_r+0x5c>
 8004890:	4629      	mov	r1, r5
 8004892:	4630      	mov	r0, r6
 8004894:	f000 fba6 	bl	8004fe4 <__swsetup_r>
 8004898:	b170      	cbz	r0, 80048b8 <_vfiprintf_r+0x5c>
 800489a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800489c:	07dc      	lsls	r4, r3, #31
 800489e:	d504      	bpl.n	80048aa <_vfiprintf_r+0x4e>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	b01d      	add	sp, #116	@ 0x74
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	89ab      	ldrh	r3, [r5, #12]
 80048ac:	0598      	lsls	r0, r3, #22
 80048ae:	d4f7      	bmi.n	80048a0 <_vfiprintf_r+0x44>
 80048b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b2:	f7ff fea1 	bl	80045f8 <__retarget_lock_release_recursive>
 80048b6:	e7f3      	b.n	80048a0 <_vfiprintf_r+0x44>
 80048b8:	2300      	movs	r3, #0
 80048ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80048bc:	2320      	movs	r3, #32
 80048be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048c6:	2330      	movs	r3, #48	@ 0x30
 80048c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a78 <_vfiprintf_r+0x21c>
 80048cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048d0:	f04f 0901 	mov.w	r9, #1
 80048d4:	4623      	mov	r3, r4
 80048d6:	469a      	mov	sl, r3
 80048d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048dc:	b10a      	cbz	r2, 80048e2 <_vfiprintf_r+0x86>
 80048de:	2a25      	cmp	r2, #37	@ 0x25
 80048e0:	d1f9      	bne.n	80048d6 <_vfiprintf_r+0x7a>
 80048e2:	ebba 0b04 	subs.w	fp, sl, r4
 80048e6:	d00b      	beq.n	8004900 <_vfiprintf_r+0xa4>
 80048e8:	465b      	mov	r3, fp
 80048ea:	4622      	mov	r2, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7ff ffa1 	bl	8004836 <__sfputs_r>
 80048f4:	3001      	adds	r0, #1
 80048f6:	f000 80a7 	beq.w	8004a48 <_vfiprintf_r+0x1ec>
 80048fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048fc:	445a      	add	r2, fp
 80048fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8004900:	f89a 3000 	ldrb.w	r3, [sl]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 809f 	beq.w	8004a48 <_vfiprintf_r+0x1ec>
 800490a:	2300      	movs	r3, #0
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004914:	f10a 0a01 	add.w	sl, sl, #1
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	9307      	str	r3, [sp, #28]
 800491c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004920:	931a      	str	r3, [sp, #104]	@ 0x68
 8004922:	4654      	mov	r4, sl
 8004924:	2205      	movs	r2, #5
 8004926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492a:	4853      	ldr	r0, [pc, #332]	@ (8004a78 <_vfiprintf_r+0x21c>)
 800492c:	f7fb fc58 	bl	80001e0 <memchr>
 8004930:	9a04      	ldr	r2, [sp, #16]
 8004932:	b9d8      	cbnz	r0, 800496c <_vfiprintf_r+0x110>
 8004934:	06d1      	lsls	r1, r2, #27
 8004936:	bf44      	itt	mi
 8004938:	2320      	movmi	r3, #32
 800493a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800493e:	0713      	lsls	r3, r2, #28
 8004940:	bf44      	itt	mi
 8004942:	232b      	movmi	r3, #43	@ 0x2b
 8004944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004948:	f89a 3000 	ldrb.w	r3, [sl]
 800494c:	2b2a      	cmp	r3, #42	@ 0x2a
 800494e:	d015      	beq.n	800497c <_vfiprintf_r+0x120>
 8004950:	9a07      	ldr	r2, [sp, #28]
 8004952:	4654      	mov	r4, sl
 8004954:	2000      	movs	r0, #0
 8004956:	f04f 0c0a 	mov.w	ip, #10
 800495a:	4621      	mov	r1, r4
 800495c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004960:	3b30      	subs	r3, #48	@ 0x30
 8004962:	2b09      	cmp	r3, #9
 8004964:	d94b      	bls.n	80049fe <_vfiprintf_r+0x1a2>
 8004966:	b1b0      	cbz	r0, 8004996 <_vfiprintf_r+0x13a>
 8004968:	9207      	str	r2, [sp, #28]
 800496a:	e014      	b.n	8004996 <_vfiprintf_r+0x13a>
 800496c:	eba0 0308 	sub.w	r3, r0, r8
 8004970:	fa09 f303 	lsl.w	r3, r9, r3
 8004974:	4313      	orrs	r3, r2
 8004976:	9304      	str	r3, [sp, #16]
 8004978:	46a2      	mov	sl, r4
 800497a:	e7d2      	b.n	8004922 <_vfiprintf_r+0xc6>
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	1d19      	adds	r1, r3, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	9103      	str	r1, [sp, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	bfbb      	ittet	lt
 8004988:	425b      	neglt	r3, r3
 800498a:	f042 0202 	orrlt.w	r2, r2, #2
 800498e:	9307      	strge	r3, [sp, #28]
 8004990:	9307      	strlt	r3, [sp, #28]
 8004992:	bfb8      	it	lt
 8004994:	9204      	strlt	r2, [sp, #16]
 8004996:	7823      	ldrb	r3, [r4, #0]
 8004998:	2b2e      	cmp	r3, #46	@ 0x2e
 800499a:	d10a      	bne.n	80049b2 <_vfiprintf_r+0x156>
 800499c:	7863      	ldrb	r3, [r4, #1]
 800499e:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a0:	d132      	bne.n	8004a08 <_vfiprintf_r+0x1ac>
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	1d1a      	adds	r2, r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	9203      	str	r2, [sp, #12]
 80049aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049ae:	3402      	adds	r4, #2
 80049b0:	9305      	str	r3, [sp, #20]
 80049b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a88 <_vfiprintf_r+0x22c>
 80049b6:	7821      	ldrb	r1, [r4, #0]
 80049b8:	2203      	movs	r2, #3
 80049ba:	4650      	mov	r0, sl
 80049bc:	f7fb fc10 	bl	80001e0 <memchr>
 80049c0:	b138      	cbz	r0, 80049d2 <_vfiprintf_r+0x176>
 80049c2:	9b04      	ldr	r3, [sp, #16]
 80049c4:	eba0 000a 	sub.w	r0, r0, sl
 80049c8:	2240      	movs	r2, #64	@ 0x40
 80049ca:	4082      	lsls	r2, r0
 80049cc:	4313      	orrs	r3, r2
 80049ce:	3401      	adds	r4, #1
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d6:	4829      	ldr	r0, [pc, #164]	@ (8004a7c <_vfiprintf_r+0x220>)
 80049d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049dc:	2206      	movs	r2, #6
 80049de:	f7fb fbff 	bl	80001e0 <memchr>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d03f      	beq.n	8004a66 <_vfiprintf_r+0x20a>
 80049e6:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <_vfiprintf_r+0x224>)
 80049e8:	bb1b      	cbnz	r3, 8004a32 <_vfiprintf_r+0x1d6>
 80049ea:	9b03      	ldr	r3, [sp, #12]
 80049ec:	3307      	adds	r3, #7
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	3308      	adds	r3, #8
 80049f4:	9303      	str	r3, [sp, #12]
 80049f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f8:	443b      	add	r3, r7
 80049fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fc:	e76a      	b.n	80048d4 <_vfiprintf_r+0x78>
 80049fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a02:	460c      	mov	r4, r1
 8004a04:	2001      	movs	r0, #1
 8004a06:	e7a8      	b.n	800495a <_vfiprintf_r+0xfe>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	3401      	adds	r4, #1
 8004a0c:	9305      	str	r3, [sp, #20]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f04f 0c0a 	mov.w	ip, #10
 8004a14:	4620      	mov	r0, r4
 8004a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a1a:	3a30      	subs	r2, #48	@ 0x30
 8004a1c:	2a09      	cmp	r2, #9
 8004a1e:	d903      	bls.n	8004a28 <_vfiprintf_r+0x1cc>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0c6      	beq.n	80049b2 <_vfiprintf_r+0x156>
 8004a24:	9105      	str	r1, [sp, #20]
 8004a26:	e7c4      	b.n	80049b2 <_vfiprintf_r+0x156>
 8004a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e7f0      	b.n	8004a14 <_vfiprintf_r+0x1b8>
 8004a32:	ab03      	add	r3, sp, #12
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	462a      	mov	r2, r5
 8004a38:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <_vfiprintf_r+0x228>)
 8004a3a:	a904      	add	r1, sp, #16
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f3af 8000 	nop.w
 8004a42:	4607      	mov	r7, r0
 8004a44:	1c78      	adds	r0, r7, #1
 8004a46:	d1d6      	bne.n	80049f6 <_vfiprintf_r+0x19a>
 8004a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4a:	07d9      	lsls	r1, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_vfiprintf_r+0x1fe>
 8004a4e:	89ab      	ldrh	r3, [r5, #12]
 8004a50:	059a      	lsls	r2, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_vfiprintf_r+0x1fe>
 8004a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a56:	f7ff fdcf 	bl	80045f8 <__retarget_lock_release_recursive>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	065b      	lsls	r3, r3, #25
 8004a5e:	f53f af1f 	bmi.w	80048a0 <_vfiprintf_r+0x44>
 8004a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a64:	e71e      	b.n	80048a4 <_vfiprintf_r+0x48>
 8004a66:	ab03      	add	r3, sp, #12
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	462a      	mov	r2, r5
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <_vfiprintf_r+0x228>)
 8004a6e:	a904      	add	r1, sp, #16
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f879 	bl	8004b68 <_printf_i>
 8004a76:	e7e4      	b.n	8004a42 <_vfiprintf_r+0x1e6>
 8004a78:	080052cc 	.word	0x080052cc
 8004a7c:	080052d6 	.word	0x080052d6
 8004a80:	00000000 	.word	0x00000000
 8004a84:	08004837 	.word	0x08004837
 8004a88:	080052d2 	.word	0x080052d2

08004a8c <_printf_common>:
 8004a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	4616      	mov	r6, r2
 8004a92:	4698      	mov	r8, r3
 8004a94:	688a      	ldr	r2, [r1, #8]
 8004a96:	690b      	ldr	r3, [r1, #16]
 8004a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bfb8      	it	lt
 8004aa0:	4613      	movlt	r3, r2
 8004aa2:	6033      	str	r3, [r6, #0]
 8004aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	b10a      	cbz	r2, 8004ab2 <_printf_common+0x26>
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	0699      	lsls	r1, r3, #26
 8004ab6:	bf42      	ittt	mi
 8004ab8:	6833      	ldrmi	r3, [r6, #0]
 8004aba:	3302      	addmi	r3, #2
 8004abc:	6033      	strmi	r3, [r6, #0]
 8004abe:	6825      	ldr	r5, [r4, #0]
 8004ac0:	f015 0506 	ands.w	r5, r5, #6
 8004ac4:	d106      	bne.n	8004ad4 <_printf_common+0x48>
 8004ac6:	f104 0a19 	add.w	sl, r4, #25
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	6832      	ldr	r2, [r6, #0]
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	dc26      	bgt.n	8004b22 <_printf_common+0x96>
 8004ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	3b00      	subs	r3, #0
 8004adc:	bf18      	it	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	0692      	lsls	r2, r2, #26
 8004ae2:	d42b      	bmi.n	8004b3c <_printf_common+0xb0>
 8004ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ae8:	4641      	mov	r1, r8
 8004aea:	4638      	mov	r0, r7
 8004aec:	47c8      	blx	r9
 8004aee:	3001      	adds	r0, #1
 8004af0:	d01e      	beq.n	8004b30 <_printf_common+0xa4>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	6922      	ldr	r2, [r4, #16]
 8004af6:	f003 0306 	and.w	r3, r3, #6
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	bf02      	ittt	eq
 8004afe:	68e5      	ldreq	r5, [r4, #12]
 8004b00:	6833      	ldreq	r3, [r6, #0]
 8004b02:	1aed      	subeq	r5, r5, r3
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	bf0c      	ite	eq
 8004b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b0c:	2500      	movne	r5, #0
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	bfc4      	itt	gt
 8004b12:	1a9b      	subgt	r3, r3, r2
 8004b14:	18ed      	addgt	r5, r5, r3
 8004b16:	2600      	movs	r6, #0
 8004b18:	341a      	adds	r4, #26
 8004b1a:	42b5      	cmp	r5, r6
 8004b1c:	d11a      	bne.n	8004b54 <_printf_common+0xc8>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e008      	b.n	8004b34 <_printf_common+0xa8>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4652      	mov	r2, sl
 8004b26:	4641      	mov	r1, r8
 8004b28:	4638      	mov	r0, r7
 8004b2a:	47c8      	blx	r9
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d103      	bne.n	8004b38 <_printf_common+0xac>
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b38:	3501      	adds	r5, #1
 8004b3a:	e7c6      	b.n	8004aca <_printf_common+0x3e>
 8004b3c:	18e1      	adds	r1, r4, r3
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	2030      	movs	r0, #48	@ 0x30
 8004b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b46:	4422      	add	r2, r4
 8004b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b50:	3302      	adds	r3, #2
 8004b52:	e7c7      	b.n	8004ae4 <_printf_common+0x58>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4622      	mov	r2, r4
 8004b58:	4641      	mov	r1, r8
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c8      	blx	r9
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d0e6      	beq.n	8004b30 <_printf_common+0xa4>
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7d9      	b.n	8004b1a <_printf_common+0x8e>
	...

08004b68 <_printf_i>:
 8004b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	7e0f      	ldrb	r7, [r1, #24]
 8004b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b70:	2f78      	cmp	r7, #120	@ 0x78
 8004b72:	4691      	mov	r9, r2
 8004b74:	4680      	mov	r8, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b7e:	d807      	bhi.n	8004b90 <_printf_i+0x28>
 8004b80:	2f62      	cmp	r7, #98	@ 0x62
 8004b82:	d80a      	bhi.n	8004b9a <_printf_i+0x32>
 8004b84:	2f00      	cmp	r7, #0
 8004b86:	f000 80d2 	beq.w	8004d2e <_printf_i+0x1c6>
 8004b8a:	2f58      	cmp	r7, #88	@ 0x58
 8004b8c:	f000 80b9 	beq.w	8004d02 <_printf_i+0x19a>
 8004b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b98:	e03a      	b.n	8004c10 <_printf_i+0xa8>
 8004b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b9e:	2b15      	cmp	r3, #21
 8004ba0:	d8f6      	bhi.n	8004b90 <_printf_i+0x28>
 8004ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ba8 <_printf_i+0x40>)
 8004ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba8:	08004c01 	.word	0x08004c01
 8004bac:	08004c15 	.word	0x08004c15
 8004bb0:	08004b91 	.word	0x08004b91
 8004bb4:	08004b91 	.word	0x08004b91
 8004bb8:	08004b91 	.word	0x08004b91
 8004bbc:	08004b91 	.word	0x08004b91
 8004bc0:	08004c15 	.word	0x08004c15
 8004bc4:	08004b91 	.word	0x08004b91
 8004bc8:	08004b91 	.word	0x08004b91
 8004bcc:	08004b91 	.word	0x08004b91
 8004bd0:	08004b91 	.word	0x08004b91
 8004bd4:	08004d15 	.word	0x08004d15
 8004bd8:	08004c3f 	.word	0x08004c3f
 8004bdc:	08004ccf 	.word	0x08004ccf
 8004be0:	08004b91 	.word	0x08004b91
 8004be4:	08004b91 	.word	0x08004b91
 8004be8:	08004d37 	.word	0x08004d37
 8004bec:	08004b91 	.word	0x08004b91
 8004bf0:	08004c3f 	.word	0x08004c3f
 8004bf4:	08004b91 	.word	0x08004b91
 8004bf8:	08004b91 	.word	0x08004b91
 8004bfc:	08004cd7 	.word	0x08004cd7
 8004c00:	6833      	ldr	r3, [r6, #0]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6032      	str	r2, [r6, #0]
 8004c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c10:	2301      	movs	r3, #1
 8004c12:	e09d      	b.n	8004d50 <_printf_i+0x1e8>
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	6031      	str	r1, [r6, #0]
 8004c1c:	0606      	lsls	r6, r0, #24
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0xbc>
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	e003      	b.n	8004c2c <_printf_i+0xc4>
 8004c24:	0645      	lsls	r5, r0, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0xb8>
 8004c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	da03      	bge.n	8004c38 <_printf_i+0xd0>
 8004c30:	232d      	movs	r3, #45	@ 0x2d
 8004c32:	426d      	negs	r5, r5
 8004c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c38:	4859      	ldr	r0, [pc, #356]	@ (8004da0 <_printf_i+0x238>)
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	e011      	b.n	8004c62 <_printf_i+0xfa>
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	0608      	lsls	r0, r1, #24
 8004c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c48:	d402      	bmi.n	8004c50 <_printf_i+0xe8>
 8004c4a:	0649      	lsls	r1, r1, #25
 8004c4c:	bf48      	it	mi
 8004c4e:	b2ad      	uxthmi	r5, r5
 8004c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c52:	4853      	ldr	r0, [pc, #332]	@ (8004da0 <_printf_i+0x238>)
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	bf14      	ite	ne
 8004c58:	230a      	movne	r3, #10
 8004c5a:	2308      	moveq	r3, #8
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c62:	6866      	ldr	r6, [r4, #4]
 8004c64:	60a6      	str	r6, [r4, #8]
 8004c66:	2e00      	cmp	r6, #0
 8004c68:	bfa2      	ittt	ge
 8004c6a:	6821      	ldrge	r1, [r4, #0]
 8004c6c:	f021 0104 	bicge.w	r1, r1, #4
 8004c70:	6021      	strge	r1, [r4, #0]
 8004c72:	b90d      	cbnz	r5, 8004c78 <_printf_i+0x110>
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	d04b      	beq.n	8004d10 <_printf_i+0x1a8>
 8004c78:	4616      	mov	r6, r2
 8004c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c82:	5dc7      	ldrb	r7, [r0, r7]
 8004c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c88:	462f      	mov	r7, r5
 8004c8a:	42bb      	cmp	r3, r7
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	d9f4      	bls.n	8004c7a <_printf_i+0x112>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d10b      	bne.n	8004cac <_printf_i+0x144>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	07df      	lsls	r7, r3, #31
 8004c98:	d508      	bpl.n	8004cac <_printf_i+0x144>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	6861      	ldr	r1, [r4, #4]
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	bfde      	ittt	le
 8004ca2:	2330      	movle	r3, #48	@ 0x30
 8004ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ca8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cac:	1b92      	subs	r2, r2, r6
 8004cae:	6122      	str	r2, [r4, #16]
 8004cb0:	f8cd a000 	str.w	sl, [sp]
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	aa03      	add	r2, sp, #12
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7ff fee6 	bl	8004a8c <_printf_common>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d14a      	bne.n	8004d5a <_printf_i+0x1f2>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	b004      	add	sp, #16
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	4833      	ldr	r0, [pc, #204]	@ (8004da4 <_printf_i+0x23c>)
 8004cd8:	2778      	movs	r7, #120	@ 0x78
 8004cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	6831      	ldr	r1, [r6, #0]
 8004ce2:	061f      	lsls	r7, r3, #24
 8004ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ce8:	d402      	bmi.n	8004cf0 <_printf_i+0x188>
 8004cea:	065f      	lsls	r7, r3, #25
 8004cec:	bf48      	it	mi
 8004cee:	b2ad      	uxthmi	r5, r5
 8004cf0:	6031      	str	r1, [r6, #0]
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	bf44      	itt	mi
 8004cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfa:	6023      	strmi	r3, [r4, #0]
 8004cfc:	b11d      	cbz	r5, 8004d06 <_printf_i+0x19e>
 8004cfe:	2310      	movs	r3, #16
 8004d00:	e7ac      	b.n	8004c5c <_printf_i+0xf4>
 8004d02:	4827      	ldr	r0, [pc, #156]	@ (8004da0 <_printf_i+0x238>)
 8004d04:	e7e9      	b.n	8004cda <_printf_i+0x172>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f023 0320 	bic.w	r3, r3, #32
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	e7f6      	b.n	8004cfe <_printf_i+0x196>
 8004d10:	4616      	mov	r6, r2
 8004d12:	e7bd      	b.n	8004c90 <_printf_i+0x128>
 8004d14:	6833      	ldr	r3, [r6, #0]
 8004d16:	6825      	ldr	r5, [r4, #0]
 8004d18:	6961      	ldr	r1, [r4, #20]
 8004d1a:	1d18      	adds	r0, r3, #4
 8004d1c:	6030      	str	r0, [r6, #0]
 8004d1e:	062e      	lsls	r6, r5, #24
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0x1c0>
 8004d24:	6019      	str	r1, [r3, #0]
 8004d26:	e002      	b.n	8004d2e <_printf_i+0x1c6>
 8004d28:	0668      	lsls	r0, r5, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0x1bc>
 8004d2c:	8019      	strh	r1, [r3, #0]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	4616      	mov	r6, r2
 8004d34:	e7bc      	b.n	8004cb0 <_printf_i+0x148>
 8004d36:	6833      	ldr	r3, [r6, #0]
 8004d38:	1d1a      	adds	r2, r3, #4
 8004d3a:	6032      	str	r2, [r6, #0]
 8004d3c:	681e      	ldr	r6, [r3, #0]
 8004d3e:	6862      	ldr	r2, [r4, #4]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7fb fa4c 	bl	80001e0 <memchr>
 8004d48:	b108      	cbz	r0, 8004d4e <_printf_i+0x1e6>
 8004d4a:	1b80      	subs	r0, r0, r6
 8004d4c:	6060      	str	r0, [r4, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	2300      	movs	r3, #0
 8004d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d58:	e7aa      	b.n	8004cb0 <_printf_i+0x148>
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d0ad      	beq.n	8004cc4 <_printf_i+0x15c>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	079b      	lsls	r3, r3, #30
 8004d6c:	d413      	bmi.n	8004d96 <_printf_i+0x22e>
 8004d6e:	68e0      	ldr	r0, [r4, #12]
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	4298      	cmp	r0, r3
 8004d74:	bfb8      	it	lt
 8004d76:	4618      	movlt	r0, r3
 8004d78:	e7a6      	b.n	8004cc8 <_printf_i+0x160>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4640      	mov	r0, r8
 8004d82:	47d0      	blx	sl
 8004d84:	3001      	adds	r0, #1
 8004d86:	d09d      	beq.n	8004cc4 <_printf_i+0x15c>
 8004d88:	3501      	adds	r5, #1
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	9903      	ldr	r1, [sp, #12]
 8004d8e:	1a5b      	subs	r3, r3, r1
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	dcf2      	bgt.n	8004d7a <_printf_i+0x212>
 8004d94:	e7eb      	b.n	8004d6e <_printf_i+0x206>
 8004d96:	2500      	movs	r5, #0
 8004d98:	f104 0619 	add.w	r6, r4, #25
 8004d9c:	e7f5      	b.n	8004d8a <_printf_i+0x222>
 8004d9e:	bf00      	nop
 8004da0:	080052dd 	.word	0x080052dd
 8004da4:	080052ee 	.word	0x080052ee

08004da8 <__sflush_r>:
 8004da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db0:	0716      	lsls	r6, r2, #28
 8004db2:	4605      	mov	r5, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	d454      	bmi.n	8004e62 <__sflush_r+0xba>
 8004db8:	684b      	ldr	r3, [r1, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x1c>
 8004dbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dd48      	ble.n	8004e56 <__sflush_r+0xae>
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d045      	beq.n	8004e56 <__sflush_r+0xae>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	6a21      	ldr	r1, [r4, #32]
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	d030      	beq.n	8004e3a <__sflush_r+0x92>
 8004dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	0759      	lsls	r1, r3, #29
 8004dde:	d505      	bpl.n	8004dec <__sflush_r+0x44>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004de6:	b10b      	cbz	r3, 8004dec <__sflush_r+0x44>
 8004de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dea:	1ad2      	subs	r2, r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df0:	6a21      	ldr	r1, [r4, #32]
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	d106      	bne.n	8004e0a <__sflush_r+0x62>
 8004dfc:	6829      	ldr	r1, [r5, #0]
 8004dfe:	291d      	cmp	r1, #29
 8004e00:	d82b      	bhi.n	8004e5a <__sflush_r+0xb2>
 8004e02:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <__sflush_r+0x104>)
 8004e04:	410a      	asrs	r2, r1
 8004e06:	07d6      	lsls	r6, r2, #31
 8004e08:	d427      	bmi.n	8004e5a <__sflush_r+0xb2>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6062      	str	r2, [r4, #4]
 8004e0e:	04d9      	lsls	r1, r3, #19
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	d504      	bpl.n	8004e20 <__sflush_r+0x78>
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	d101      	bne.n	8004e1e <__sflush_r+0x76>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b903      	cbnz	r3, 8004e20 <__sflush_r+0x78>
 8004e1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	b1b9      	cbz	r1, 8004e56 <__sflush_r+0xae>
 8004e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d002      	beq.n	8004e34 <__sflush_r+0x8c>
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7ff fbf2 	bl	8004618 <_free_r>
 8004e34:	2300      	movs	r3, #0
 8004e36:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e38:	e00d      	b.n	8004e56 <__sflush_r+0xae>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b0      	blx	r6
 8004e40:	4602      	mov	r2, r0
 8004e42:	1c50      	adds	r0, r2, #1
 8004e44:	d1c9      	bne.n	8004dda <__sflush_r+0x32>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0c6      	beq.n	8004dda <__sflush_r+0x32>
 8004e4c:	2b1d      	cmp	r3, #29
 8004e4e:	d001      	beq.n	8004e54 <__sflush_r+0xac>
 8004e50:	2b16      	cmp	r3, #22
 8004e52:	d11e      	bne.n	8004e92 <__sflush_r+0xea>
 8004e54:	602f      	str	r7, [r5, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	e022      	b.n	8004ea0 <__sflush_r+0xf8>
 8004e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	e01b      	b.n	8004e9a <__sflush_r+0xf2>
 8004e62:	690f      	ldr	r7, [r1, #16]
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	d0f6      	beq.n	8004e56 <__sflush_r+0xae>
 8004e68:	0793      	lsls	r3, r2, #30
 8004e6a:	680e      	ldr	r6, [r1, #0]
 8004e6c:	bf08      	it	eq
 8004e6e:	694b      	ldreq	r3, [r1, #20]
 8004e70:	600f      	str	r7, [r1, #0]
 8004e72:	bf18      	it	ne
 8004e74:	2300      	movne	r3, #0
 8004e76:	eba6 0807 	sub.w	r8, r6, r7
 8004e7a:	608b      	str	r3, [r1, #8]
 8004e7c:	f1b8 0f00 	cmp.w	r8, #0
 8004e80:	dde9      	ble.n	8004e56 <__sflush_r+0xae>
 8004e82:	6a21      	ldr	r1, [r4, #32]
 8004e84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e86:	4643      	mov	r3, r8
 8004e88:	463a      	mov	r2, r7
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	dc08      	bgt.n	8004ea4 <__sflush_r+0xfc>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	4407      	add	r7, r0
 8004ea6:	eba8 0800 	sub.w	r8, r8, r0
 8004eaa:	e7e7      	b.n	8004e7c <__sflush_r+0xd4>
 8004eac:	dfbffffe 	.word	0xdfbffffe

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_fflush_r+0x10>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	b118      	cbz	r0, 8004eca <_fflush_r+0x1a>
 8004ec2:	6a03      	ldr	r3, [r0, #32]
 8004ec4:	b90b      	cbnz	r3, 8004eca <_fflush_r+0x1a>
 8004ec6:	f7ff fa7f 	bl	80043c8 <__sinit>
 8004eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f3      	beq.n	8004eba <_fflush_r+0xa>
 8004ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ed4:	07d0      	lsls	r0, r2, #31
 8004ed6:	d404      	bmi.n	8004ee2 <_fflush_r+0x32>
 8004ed8:	0599      	lsls	r1, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_fflush_r+0x32>
 8004edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ede:	f7ff fb8a 	bl	80045f6 <__retarget_lock_acquire_recursive>
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f7ff ff5f 	bl	8004da8 <__sflush_r>
 8004eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eec:	07da      	lsls	r2, r3, #31
 8004eee:	4605      	mov	r5, r0
 8004ef0:	d4e4      	bmi.n	8004ebc <_fflush_r+0xc>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	d4e1      	bmi.n	8004ebc <_fflush_r+0xc>
 8004ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efa:	f7ff fb7d 	bl	80045f8 <__retarget_lock_release_recursive>
 8004efe:	e7dd      	b.n	8004ebc <_fflush_r+0xc>

08004f00 <_putc_r>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	460d      	mov	r5, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	4606      	mov	r6, r0
 8004f08:	b118      	cbz	r0, 8004f12 <_putc_r+0x12>
 8004f0a:	6a03      	ldr	r3, [r0, #32]
 8004f0c:	b90b      	cbnz	r3, 8004f12 <_putc_r+0x12>
 8004f0e:	f7ff fa5b 	bl	80043c8 <__sinit>
 8004f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f14:	07d8      	lsls	r0, r3, #31
 8004f16:	d405      	bmi.n	8004f24 <_putc_r+0x24>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	0599      	lsls	r1, r3, #22
 8004f1c:	d402      	bmi.n	8004f24 <_putc_r+0x24>
 8004f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f20:	f7ff fb69 	bl	80045f6 <__retarget_lock_acquire_recursive>
 8004f24:	68a3      	ldr	r3, [r4, #8]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	60a3      	str	r3, [r4, #8]
 8004f2c:	da05      	bge.n	8004f3a <_putc_r+0x3a>
 8004f2e:	69a2      	ldr	r2, [r4, #24]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	db12      	blt.n	8004f5a <_putc_r+0x5a>
 8004f34:	b2eb      	uxtb	r3, r5
 8004f36:	2b0a      	cmp	r3, #10
 8004f38:	d00f      	beq.n	8004f5a <_putc_r+0x5a>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	701d      	strb	r5, [r3, #0]
 8004f42:	b2ed      	uxtb	r5, r5
 8004f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f46:	07da      	lsls	r2, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_putc_r+0x56>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	059b      	lsls	r3, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_putc_r+0x56>
 8004f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f52:	f7ff fb51 	bl	80045f8 <__retarget_lock_release_recursive>
 8004f56:	4628      	mov	r0, r5
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f802 	bl	8004f68 <__swbuf_r>
 8004f64:	4605      	mov	r5, r0
 8004f66:	e7ed      	b.n	8004f44 <_putc_r+0x44>

08004f68 <__swbuf_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4605      	mov	r5, r0
 8004f70:	b118      	cbz	r0, 8004f7a <__swbuf_r+0x12>
 8004f72:	6a03      	ldr	r3, [r0, #32]
 8004f74:	b90b      	cbnz	r3, 8004f7a <__swbuf_r+0x12>
 8004f76:	f7ff fa27 	bl	80043c8 <__sinit>
 8004f7a:	69a3      	ldr	r3, [r4, #24]
 8004f7c:	60a3      	str	r3, [r4, #8]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	071a      	lsls	r2, r3, #28
 8004f82:	d501      	bpl.n	8004f88 <__swbuf_r+0x20>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	b943      	cbnz	r3, 8004f9a <__swbuf_r+0x32>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f82a 	bl	8004fe4 <__swsetup_r>
 8004f90:	b118      	cbz	r0, 8004f9a <__swbuf_r+0x32>
 8004f92:	f04f 37ff 	mov.w	r7, #4294967295
 8004f96:	4638      	mov	r0, r7
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	6922      	ldr	r2, [r4, #16]
 8004f9e:	1a98      	subs	r0, r3, r2
 8004fa0:	6963      	ldr	r3, [r4, #20]
 8004fa2:	b2f6      	uxtb	r6, r6
 8004fa4:	4283      	cmp	r3, r0
 8004fa6:	4637      	mov	r7, r6
 8004fa8:	dc05      	bgt.n	8004fb6 <__swbuf_r+0x4e>
 8004faa:	4621      	mov	r1, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7ff ff7f 	bl	8004eb0 <_fflush_r>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1ed      	bne.n	8004f92 <__swbuf_r+0x2a>
 8004fb6:	68a3      	ldr	r3, [r4, #8]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	60a3      	str	r3, [r4, #8]
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	701e      	strb	r6, [r3, #0]
 8004fc4:	6962      	ldr	r2, [r4, #20]
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d004      	beq.n	8004fd6 <__swbuf_r+0x6e>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	07db      	lsls	r3, r3, #31
 8004fd0:	d5e1      	bpl.n	8004f96 <__swbuf_r+0x2e>
 8004fd2:	2e0a      	cmp	r6, #10
 8004fd4:	d1df      	bne.n	8004f96 <__swbuf_r+0x2e>
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f7ff ff69 	bl	8004eb0 <_fflush_r>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d0d9      	beq.n	8004f96 <__swbuf_r+0x2e>
 8004fe2:	e7d6      	b.n	8004f92 <__swbuf_r+0x2a>

08004fe4 <__swsetup_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4b29      	ldr	r3, [pc, #164]	@ (800508c <__swsetup_r+0xa8>)
 8004fe8:	4605      	mov	r5, r0
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	460c      	mov	r4, r1
 8004fee:	b118      	cbz	r0, 8004ff8 <__swsetup_r+0x14>
 8004ff0:	6a03      	ldr	r3, [r0, #32]
 8004ff2:	b90b      	cbnz	r3, 8004ff8 <__swsetup_r+0x14>
 8004ff4:	f7ff f9e8 	bl	80043c8 <__sinit>
 8004ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ffc:	0719      	lsls	r1, r3, #28
 8004ffe:	d422      	bmi.n	8005046 <__swsetup_r+0x62>
 8005000:	06da      	lsls	r2, r3, #27
 8005002:	d407      	bmi.n	8005014 <__swsetup_r+0x30>
 8005004:	2209      	movs	r2, #9
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	e033      	b.n	800507c <__swsetup_r+0x98>
 8005014:	0758      	lsls	r0, r3, #29
 8005016:	d512      	bpl.n	800503e <__swsetup_r+0x5a>
 8005018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800501a:	b141      	cbz	r1, 800502e <__swsetup_r+0x4a>
 800501c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005020:	4299      	cmp	r1, r3
 8005022:	d002      	beq.n	800502a <__swsetup_r+0x46>
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff faf7 	bl	8004618 <_free_r>
 800502a:	2300      	movs	r3, #0
 800502c:	6363      	str	r3, [r4, #52]	@ 0x34
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	2300      	movs	r3, #0
 8005038:	6063      	str	r3, [r4, #4]
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	f043 0308 	orr.w	r3, r3, #8
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	b94b      	cbnz	r3, 800505e <__swsetup_r+0x7a>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d003      	beq.n	800505e <__swsetup_r+0x7a>
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 f84f 	bl	80050fc <__smakebuf_r>
 800505e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005062:	f013 0201 	ands.w	r2, r3, #1
 8005066:	d00a      	beq.n	800507e <__swsetup_r+0x9a>
 8005068:	2200      	movs	r2, #0
 800506a:	60a2      	str	r2, [r4, #8]
 800506c:	6962      	ldr	r2, [r4, #20]
 800506e:	4252      	negs	r2, r2
 8005070:	61a2      	str	r2, [r4, #24]
 8005072:	6922      	ldr	r2, [r4, #16]
 8005074:	b942      	cbnz	r2, 8005088 <__swsetup_r+0xa4>
 8005076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800507a:	d1c5      	bne.n	8005008 <__swsetup_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	0799      	lsls	r1, r3, #30
 8005080:	bf58      	it	pl
 8005082:	6962      	ldrpl	r2, [r4, #20]
 8005084:	60a2      	str	r2, [r4, #8]
 8005086:	e7f4      	b.n	8005072 <__swsetup_r+0x8e>
 8005088:	2000      	movs	r0, #0
 800508a:	e7f7      	b.n	800507c <__swsetup_r+0x98>
 800508c:	20000018 	.word	0x20000018

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	@ (80050ac <_sbrk_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fef8 	bl	8000e90 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	200004e4 	.word	0x200004e4

080050b0 <__swhatbuf_r>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	460c      	mov	r4, r1
 80050b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b8:	2900      	cmp	r1, #0
 80050ba:	b096      	sub	sp, #88	@ 0x58
 80050bc:	4615      	mov	r5, r2
 80050be:	461e      	mov	r6, r3
 80050c0:	da0d      	bge.n	80050de <__swhatbuf_r+0x2e>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2340      	movne	r3, #64	@ 0x40
 80050d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050d4:	2000      	movs	r0, #0
 80050d6:	6031      	str	r1, [r6, #0]
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	b016      	add	sp, #88	@ 0x58
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	466a      	mov	r2, sp
 80050e0:	f000 f848 	bl	8005174 <_fstat_r>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	dbec      	blt.n	80050c2 <__swhatbuf_r+0x12>
 80050e8:	9901      	ldr	r1, [sp, #4]
 80050ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050f2:	4259      	negs	r1, r3
 80050f4:	4159      	adcs	r1, r3
 80050f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050fa:	e7eb      	b.n	80050d4 <__swhatbuf_r+0x24>

080050fc <__smakebuf_r>:
 80050fc:	898b      	ldrh	r3, [r1, #12]
 80050fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005100:	079d      	lsls	r5, r3, #30
 8005102:	4606      	mov	r6, r0
 8005104:	460c      	mov	r4, r1
 8005106:	d507      	bpl.n	8005118 <__smakebuf_r+0x1c>
 8005108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	2301      	movs	r3, #1
 8005112:	6163      	str	r3, [r4, #20]
 8005114:	b003      	add	sp, #12
 8005116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005118:	ab01      	add	r3, sp, #4
 800511a:	466a      	mov	r2, sp
 800511c:	f7ff ffc8 	bl	80050b0 <__swhatbuf_r>
 8005120:	9f00      	ldr	r7, [sp, #0]
 8005122:	4605      	mov	r5, r0
 8005124:	4639      	mov	r1, r7
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff fae2 	bl	80046f0 <_malloc_r>
 800512c:	b948      	cbnz	r0, 8005142 <__smakebuf_r+0x46>
 800512e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005132:	059a      	lsls	r2, r3, #22
 8005134:	d4ee      	bmi.n	8005114 <__smakebuf_r+0x18>
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	e7e2      	b.n	8005108 <__smakebuf_r+0xc>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	6020      	str	r0, [r4, #0]
 8005146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	9b01      	ldr	r3, [sp, #4]
 800514e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005152:	b15b      	cbz	r3, 800516c <__smakebuf_r+0x70>
 8005154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005158:	4630      	mov	r0, r6
 800515a:	f000 f81d 	bl	8005198 <_isatty_r>
 800515e:	b128      	cbz	r0, 800516c <__smakebuf_r+0x70>
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	431d      	orrs	r5, r3
 8005170:	81a5      	strh	r5, [r4, #12]
 8005172:	e7cf      	b.n	8005114 <__smakebuf_r+0x18>

08005174 <_fstat_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	@ (8005194 <_fstat_r+0x20>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f7fb fe5c 	bl	8000e3e <_fstat>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d102      	bne.n	8005190 <_fstat_r+0x1c>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	b103      	cbz	r3, 8005190 <_fstat_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	bf00      	nop
 8005194:	200004e4 	.word	0x200004e4

08005198 <_isatty_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d06      	ldr	r5, [pc, #24]	@ (80051b4 <_isatty_r+0x1c>)
 800519c:	2300      	movs	r3, #0
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fb fe5b 	bl	8000e5e <_isatty>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_isatty_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_isatty_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	200004e4 	.word	0x200004e4

080051b8 <_init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr

080051c4 <_fini>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr
